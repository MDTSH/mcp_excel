# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_mcp')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_mcp')
    _mcp = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_mcp', [dirname(__file__)])
        except ImportError:
            import _mcp
            return _mcp
        try:
            _mod = imp.load_module('_mcp', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _mcp = swig_import_helper()
    del swig_import_helper
else:
    import _mcp
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class MxScript(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MxScript, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MxScript, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _mcp.new_MxScript()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mcp.delete_MxScript
    __del__ = lambda self: None

    def pricingSimpleBS(self, today, spot, vol, rate1, rate2, modelType, events, numSim, seed, fuzzy, defEps, skipDoms, compile, runMode, logLevel, modelParam):
        return _mcp.MxScript_pricingSimpleBS(self, today, spot, vol, rate1, rate2, modelType, events, numSim, seed, fuzzy, defEps, skipDoms, compile, runMode, logLevel, modelParam)

    def Dispose(self):
        return _mcp.MxScript_Dispose(self)

    def getHandler(self):
        return _mcp.MxScript_getHandler(self)

    def getTraceFile(self):
        return _mcp.MxScript_getTraceFile(self)
MxScript_swigregister = _mcp.MxScript_swigregister
MxScript_swigregister(MxScript)

class MOptionData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MOptionData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MOptionData, name)
    __repr__ = _swig_repr

    def __init__(self, referenceDate, assetClass, spot, expiryDates, strikes, optionTypes, mid, bid, ask, riskFreeRateCurve, underlyingCurve, riskFreeRateCurve2, underlyingCurve2, riskFreeRate, underlyingRate, logLevel):
        this = _mcp.new_MOptionData(referenceDate, assetClass, spot, expiryDates, strikes, optionTypes, mid, bid, ask, riskFreeRateCurve, underlyingCurve, riskFreeRateCurve2, underlyingCurve2, riskFreeRate, underlyingRate, logLevel)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetTraceFileName(self):
        return _mcp.MOptionData_GetTraceFileName(self)

    def Dispose(self):
        return _mcp.MOptionData_Dispose(self)

    def getHandler(self):
        return _mcp.MOptionData_getHandler(self)
    __swig_destroy__ = _mcp.delete_MOptionData
    __del__ = lambda self: None
MOptionData_swigregister = _mcp.MOptionData_swigregister
MOptionData_swigregister(MOptionData)

class MXScriptStructure(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MXScriptStructure, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MXScriptStructure, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _mcp.new_MXScriptStructure(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mcp.delete_MXScriptStructure
    __del__ = lambda self: None

    def AnnualizedPrice(self):
        return _mcp.MXScriptStructure_AnnualizedPrice(self)

    def Price(self, isAmount=True):
        return _mcp.MXScriptStructure_Price(self, isAmount)

    def ResultByVariable(self, variable):
        return _mcp.MXScriptStructure_ResultByVariable(self, variable)

    def MarketValue(self, isAmount=True):
        return _mcp.MXScriptStructure_MarketValue(self, isAmount)

    def PV(self, isAmount):
        return _mcp.MXScriptStructure_PV(self, isAmount)

    def Delta(self, isCCY2=False, isAmount=True):
        return _mcp.MXScriptStructure_Delta(self, isCCY2, isAmount)

    def Gamma(self, isCCY2=False, isAmount=True):
        return _mcp.MXScriptStructure_Gamma(self, isCCY2, isAmount)

    def Vega(self, isCCY2=False, isAmount=True):
        return _mcp.MXScriptStructure_Vega(self, isCCY2, isAmount)

    def Theta(self, isCCY2=False, isAmount=True):
        return _mcp.MXScriptStructure_Theta(self, isCCY2, isAmount)

    def Rho(self, isCCY2=False, isAmount=True):
        return _mcp.MXScriptStructure_Rho(self, isCCY2, isAmount)

    def Vanna(self, isCCY2=False, isAmount=True):
        return _mcp.MXScriptStructure_Vanna(self, isCCY2, isAmount)

    def Volga(self, isCCY2=False, isAmount=True):
        return _mcp.MXScriptStructure_Volga(self, isCCY2, isAmount)

    def ForwardDelta(self, isCCY2=False, isAmount=True):
        return _mcp.MXScriptStructure_ForwardDelta(self, isCCY2, isAmount)

    def GetRate1(self):
        return _mcp.MXScriptStructure_GetRate1(self)

    def GetRate2(self):
        return _mcp.MXScriptStructure_GetRate2(self)

    def GetForward(self):
        return _mcp.MXScriptStructure_GetForward(self)

    def GetVolatility(self):
        return _mcp.MXScriptStructure_GetVolatility(self)

    def GetUniqueID(self):
        return _mcp.MXScriptStructure_GetUniqueID(self)

    def SetTraceDirectory(self, strDirectory):
        return _mcp.MXScriptStructure_SetTraceDirectory(self, strDirectory)

    def GetTraceDirectory(self):
        return _mcp.MXScriptStructure_GetTraceDirectory(self)

    def GetTraceFileName(self):
        return _mcp.MXScriptStructure_GetTraceFileName(self)

    def EventDates(self):
        return _mcp.MXScriptStructure_EventDates(self)

    def Events(self):
        return _mcp.MXScriptStructure_Events(self)
MXScriptStructure_swigregister = _mcp.MXScriptStructure_swigregister
MXScriptStructure_swigregister(MXScriptStructure)

class MLocalVol(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MLocalVol, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MLocalVol, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _mcp.new_MLocalVol(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetSpot(self):
        return _mcp.MLocalVol_GetSpot(self)

    def GetForward(self, expiryOrDeliveryDate, isDeliveryDate):
        return _mcp.MLocalVol_GetForward(self, expiryOrDeliveryDate, isDeliveryDate)

    def GetRiskFreeRate(self, expiryOrDeliveryDate, isDeliveryDate):
        return _mcp.MLocalVol_GetRiskFreeRate(self, expiryOrDeliveryDate, isDeliveryDate)

    def GetUnderlyingRate(self, expiryOrDeliveryDate, isDeliveryDate):
        return _mcp.MLocalVol_GetUnderlyingRate(self, expiryOrDeliveryDate, isDeliveryDate)

    def GetDividend(self):
        return _mcp.MLocalVol_GetDividend(self)

    def GetRiskFreeRateCurve(self):
        return _mcp.MLocalVol_GetRiskFreeRateCurve(self)

    def GetUnderlyingCurve(self):
        return _mcp.MLocalVol_GetUnderlyingCurve(self)

    def UsingSingleRiskFreeRate(self):
        return _mcp.MLocalVol_UsingSingleRiskFreeRate(self)

    def UsingSingleUnderlyingRate(self):
        return _mcp.MLocalVol_UsingSingleUnderlyingRate(self)

    def Parameters(self):
        return _mcp.MLocalVol_Parameters(self)

    def ParamRanges(self, isLowerGuess=True):
        return _mcp.MLocalVol_ParamRanges(self, isLowerGuess)

    def GetModelType(self):
        return _mcp.MLocalVol_GetModelType(self)

    def GetTraceFileName(self):
        return _mcp.MLocalVol_GetTraceFileName(self)

    def GetVolatility(self, strike, expiryDate):
        return _mcp.MLocalVol_GetVolatility(self, strike, expiryDate)

    def Volatilities(self, *args):
        return _mcp.MLocalVol_Volatilities(self, *args)

    def Strikes(self):
        return _mcp.MLocalVol_Strikes(self)

    def ExpiryDates(self):
        return _mcp.MLocalVol_ExpiryDates(self)

    def Dispose(self):
        return _mcp.MLocalVol_Dispose(self)

    def getHandler(self):
        return _mcp.MLocalVol_getHandler(self)
    __swig_destroy__ = _mcp.delete_MLocalVol
    __del__ = lambda self: None
MLocalVol_swigregister = _mcp.MLocalVol_swigregister
MLocalVol_swigregister(MLocalVol)

class MMCP(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MMCP, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MMCP, name)
    __repr__ = _swig_repr
    if _newclass:
        McpVersion = staticmethod(_mcp.MMCP_McpVersion)
    else:
        McpVersion = _mcp.MMCP_McpVersion
    if _newclass:
        verifyEncryptedString = staticmethod(_mcp.MMCP_verifyEncryptedString)
    else:
        verifyEncryptedString = _mcp.MMCP_verifyEncryptedString
    if _newclass:
        encryptString = staticmethod(_mcp.MMCP_encryptString)
    else:
        encryptString = _mcp.MMCP_encryptString

    def __init__(self):
        this = _mcp.new_MMCP()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mcp.delete_MMCP
    __del__ = lambda self: None
MMCP_swigregister = _mcp.MMCP_swigregister
MMCP_swigregister(MMCP)

def MMCP_McpVersion():
    return _mcp.MMCP_McpVersion()
MMCP_McpVersion = _mcp.MMCP_McpVersion

def MMCP_verifyEncryptedString(inputString, encryptedStr):
    return _mcp.MMCP_verifyEncryptedString(inputString, encryptedStr)
MMCP_verifyEncryptedString = _mcp.MMCP_verifyEncryptedString

def MMCP_encryptString(inputString):
    return _mcp.MMCP_encryptString(inputString)
MMCP_encryptString = _mcp.MMCP_encryptString

class MCredentialsChecker(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MCredentialsChecker, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MCredentialsChecker, name)
    __repr__ = _swig_repr

    def CheckLogin(self, username, password):
        return _mcp.MCredentialsChecker_CheckLogin(self, username, password)

    def __init__(self):
        this = _mcp.new_MCredentialsChecker()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mcp.delete_MCredentialsChecker
    __del__ = lambda self: None
MCredentialsChecker_swigregister = _mcp.MCredentialsChecker_swigregister
MCredentialsChecker_swigregister(MCredentialsChecker)

class MDateFuntion(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDateFuntion, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDateFuntion, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _mcp.new_MDateFuntion()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mcp.delete_MDateFuntion
    __del__ = lambda self: None

    def long2Date(self, date):
        return _mcp.MDateFuntion_long2Date(self, date)

    def Add(self, baseDate, time):
        return _mcp.MDateFuntion_Add(self, baseDate, time)

    def Date2Long(self, baseDate):
        return _mcp.MDateFuntion_Date2Long(self, baseDate)

    def Date2Str(self, baseDate):
        return _mcp.MDateFuntion_Date2Str(self, baseDate)

    def setLicenseFile(self, szFilename):
        return _mcp.MDateFuntion_setLicenseFile(self, szFilename)
MDateFuntion_swigregister = _mcp.MDateFuntion_swigregister
MDateFuntion_swigregister(MDateFuntion)

class MHestonModel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MHestonModel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MHestonModel, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _mcp.new_MHestonModel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def HestonCalibration(self, initParams):
        return _mcp.MHestonModel_HestonCalibration(self, initParams)

    def Dispose(self):
        return _mcp.MHestonModel_Dispose(self)
    __swig_destroy__ = _mcp.delete_MHestonModel
    __del__ = lambda self: None
MHestonModel_swigregister = _mcp.MHestonModel_swigregister
MHestonModel_swigregister(MHestonModel)

class MCalendar(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MCalendar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MCalendar, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _mcp.new_MCalendar(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getHandler(self):
        return _mcp.MCalendar_getHandler(self)

    def AddBusinessDays(self, *args):
        return _mcp.MCalendar_AddBusinessDays(self, *args)

    def Adjust(self, *args):
        return _mcp.MCalendar_Adjust(self, *args)

    def ValueDate(self, *args):
        return _mcp.MCalendar_ValueDate(self, *args)

    def FXOExpiryDate(self, *args):
        return _mcp.MCalendar_FXOExpiryDate(self, *args)

    def FXODeliveryDateFromTenor(self, *args):
        return _mcp.MCalendar_FXODeliveryDateFromTenor(self, *args)

    def FXOExpiryDateFromTenor(self, *args):
        return _mcp.MCalendar_FXOExpiryDateFromTenor(self, *args)

    def FXODeliveryDate(self, date, calendarCodes):
        return _mcp.MCalendar_FXODeliveryDate(self, date, calendarCodes)

    def IsBusinessDay(self, date, calendarCodes):
        return _mcp.MCalendar_IsBusinessDay(self, date, calendarCodes)

    def AddPeriod(self, *args):
        return _mcp.MCalendar_AddPeriod(self, *args)

    def LoadHolidaysFromFile(self, file):
        return _mcp.MCalendar_LoadHolidaysFromFile(self, file)
    __swig_destroy__ = _mcp.delete_MCalendar
    __del__ = lambda self: None

    def Dispose(self):
        return _mcp.MCalendar_Dispose(self)
MCalendar_swigregister = _mcp.MCalendar_swigregister
MCalendar_swigregister(MCalendar)

class MSchedule(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MSchedule, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MSchedule, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _mcp.new_MSchedule(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mcp.delete_MSchedule
    __del__ = lambda self: None

    def getHandler(self):
        return _mcp.MSchedule_getHandler(self)

    def dates(self):
        return _mcp.MSchedule_dates(self)

    def asTimes(self, valueDate, floorTo0=False):
        return _mcp.MSchedule_asTimes(self, valueDate, floorTo0)
MSchedule_swigregister = _mcp.MSchedule_swigregister
MSchedule_swigregister(MSchedule)

class MDayCounter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDayCounter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDayCounter, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _mcp.new_MDayCounter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mcp.delete_MDayCounter
    __del__ = lambda self: None

    def getHandler(self):
        return _mcp.MDayCounter_getHandler(self)

    def YearFraction(self, *args):
        return _mcp.MDayCounter_YearFraction(self, *args)

    def YearFractionToDate(self, startDate, yearFraction):
        return _mcp.MDayCounter_YearFractionToDate(self, startDate, yearFraction)

    def ToString(self):
        return _mcp.MDayCounter_ToString(self)

    def Dispose(self):
        return _mcp.MDayCounter_Dispose(self)
MDayCounter_swigregister = _mcp.MDayCounter_swigregister
MDayCounter_swigregister(MDayCounter)

class MRounder(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MRounder, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MRounder, name)
    __repr__ = _swig_repr

    def __init__(self, typeDirect, precision):
        this = _mcp.new_MRounder(typeDirect, precision)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getHandler(self):
        return _mcp.MRounder_getHandler(self)
    __swig_destroy__ = _mcp.delete_MRounder
    __del__ = lambda self: None
MRounder_swigregister = _mcp.MRounder_swigregister
MRounder_swigregister(MRounder)

class MVolatilitySurface(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MVolatilitySurface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MVolatilitySurface, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _mcp.delete_MVolatilitySurface
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _mcp.new_MVolatilitySurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetVolatility(self, interpVariable, expiryDate, deltaOrStrike=2):
        return _mcp.MVolatilitySurface_GetVolatility(self, interpVariable, expiryDate, deltaOrStrike)

    def GetATMVol(self, expiryDate):
        return _mcp.MVolatilitySurface_GetATMVol(self, expiryDate)

    def ViewVolatilities(self):
        return _mcp.MVolatilitySurface_ViewVolatilities(self)

    def getHandler(self):
        return _mcp.MVolatilitySurface_getHandler(self)

    def InterpolateRate(self, datetime, foreignRates, getDiscountFactor):
        return _mcp.MVolatilitySurface_InterpolateRate(self, datetime, foreignRates, getDiscountFactor)

    def Dispose(self):
        return _mcp.MVolatilitySurface_Dispose(self)
MVolatilitySurface_swigregister = _mcp.MVolatilitySurface_swigregister
MVolatilitySurface_swigregister(MVolatilitySurface)

class MVanillaOption(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MVanillaOption, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MVanillaOption, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _mcp.delete_MVanillaOption
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _mcp.new_MVanillaOption(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetReferenceDate(self):
        return _mcp.MVanillaOption_GetReferenceDate(self)

    def GetExpiryDate(self):
        return _mcp.MVanillaOption_GetExpiryDate(self)

    def GetDeliveryDate(self):
        return _mcp.MVanillaOption_GetDeliveryDate(self)

    def GetSettlementDate(self):
        return _mcp.MVanillaOption_GetSettlementDate(self)

    def GetSpot(self):
        return _mcp.MVanillaOption_GetSpot(self)

    def GetBuySell(self):
        return _mcp.MVanillaOption_GetBuySell(self)

    def GetStrike(self):
        return _mcp.MVanillaOption_GetStrike(self)

    def GetForward(self):
        return _mcp.MVanillaOption_GetForward(self)

    def GetCallPutType(self):
        return _mcp.MVanillaOption_GetCallPutType(self)

    def GetFaceValue(self):
        return _mcp.MVanillaOption_GetFaceValue(self)

    def GetTimeToExpiry(self):
        return _mcp.MVanillaOption_GetTimeToExpiry(self)

    def GetTimeToDelivery(self):
        return _mcp.MVanillaOption_GetTimeToDelivery(self)

    def GetTimeToSettlement(self):
        return _mcp.MVanillaOption_GetTimeToSettlement(self)

    def GetAccRate(self):
        return _mcp.MVanillaOption_GetAccRate(self)

    def GetUndRate(self):
        return _mcp.MVanillaOption_GetUndRate(self)

    def GetVol(self):
        return _mcp.MVanillaOption_GetVol(self)

    def MarketValue(self, isAmount=True):
        return _mcp.MVanillaOption_MarketValue(self, isAmount)

    def DiscMarketValue(self, isAmount=True):
        return _mcp.MVanillaOption_DiscMarketValue(self, isAmount)

    def PnL(self, isAmount=True, tradePrice=0.0):
        return _mcp.MVanillaOption_PnL(self, isAmount, tradePrice)

    def DiscPnL(self, isAmount=True, tradePrice=0.0):
        return _mcp.MVanillaOption_DiscPnL(self, isAmount, tradePrice)

    def PV(self, isAmount=True):
        return _mcp.MVanillaOption_PV(self, isAmount)

    def Price(self, *args):
        return _mcp.MVanillaOption_Price(self, *args)

    def Delta(self, *args):
        return _mcp.MVanillaOption_Delta(self, *args)

    def Gamma(self, *args):
        return _mcp.MVanillaOption_Gamma(self, *args)

    def Vega(self, *args):
        return _mcp.MVanillaOption_Vega(self, *args)

    def Theta(self, *args):
        return _mcp.MVanillaOption_Theta(self, *args)

    def Rho(self, *args):
        return _mcp.MVanillaOption_Rho(self, *args)

    def Phi(self, isCCY2=False, isAmount=True, npricingMethod=1, isClosedFormMethod=True):
        return _mcp.MVanillaOption_Phi(self, isCCY2, isAmount, npricingMethod, isClosedFormMethod)

    def Vanna(self, isCCY2=False, isAmount=True, npricingMethod=1, isClosedFormMethod=True):
        return _mcp.MVanillaOption_Vanna(self, isCCY2, isAmount, npricingMethod, isClosedFormMethod)

    def Volga(self, isCCY2=False, isAmount=True, npricingMethod=1, isClosedFormMethod=True):
        return _mcp.MVanillaOption_Volga(self, isCCY2, isAmount, npricingMethod, isClosedFormMethod)

    def ForwardDelta(self, isCCY2=False, isAmount=True, npricingMethod=1, isClosedFormMethod=True):
        return _mcp.MVanillaOption_ForwardDelta(self, isCCY2, isAmount, npricingMethod, isClosedFormMethod)

    def VegaDigital(self):
        return _mcp.MVanillaOption_VegaDigital(self)

    def VegaIDDigital(self):
        return _mcp.MVanillaOption_VegaIDDigital(self)

    def DvegaDvol(self):
        return _mcp.MVanillaOption_DvegaDvol(self)

    def Dd1Dvol(self):
        return _mcp.MVanillaOption_Dd1Dvol(self)

    def DvegaDspot(self):
        return _mcp.MVanillaOption_DvegaDspot(self)

    def DvegaDvol2(self):
        return _mcp.MVanillaOption_DvegaDvol2(self)

    def Payoff(self, *args):
        return _mcp.MVanillaOption_Payoff(self, *args)

    def StrikeImpliedFromDelta(self, delta, deltaRHS=True, isAmount=False):
        return _mcp.MVanillaOption_StrikeImpliedFromDelta(self, delta, deltaRHS, isAmount)

    def StrikeImpliedFromForwardDelta(self, delta, deltaRHS=True, isAmount=False):
        return _mcp.MVanillaOption_StrikeImpliedFromForwardDelta(self, delta, deltaRHS, isAmount)

    def VolImpliedFromPrice(self, price):
        return _mcp.MVanillaOption_VolImpliedFromPrice(self, price)

    def StrikeImpliedFromPrice(self, price, isAmount=True):
        return _mcp.MVanillaOption_StrikeImpliedFromPrice(self, price, isAmount)

    def DeltaImpliedFromStrike(self, strike):
        return _mcp.MVanillaOption_DeltaImpliedFromStrike(self, strike)

    def AmericanExerciseBoundaries(self):
        return _mcp.MVanillaOption_AmericanExerciseBoundaries(self)

    def Dispose(self):
        return _mcp.MVanillaOption_Dispose(self)
MVanillaOption_swigregister = _mcp.MVanillaOption_swigregister
MVanillaOption_swigregister(MVanillaOption)

class MVanillaStrategy(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MVanillaStrategy, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MVanillaStrategy, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _mcp.new_MVanillaStrategy(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mcp.delete_MVanillaStrategy
    __del__ = lambda self: None

    def GetStrategyType(self):
        return _mcp.MVanillaStrategy_GetStrategyType(self)

    def GetDeltaString(self):
        return _mcp.MVanillaStrategy_GetDeltaString(self)

    def GetReferenceDate(self):
        return _mcp.MVanillaStrategy_GetReferenceDate(self)

    def GetExpiryDate(self):
        return _mcp.MVanillaStrategy_GetExpiryDate(self)

    def GetDeliveryDate(self):
        return _mcp.MVanillaStrategy_GetDeliveryDate(self)

    def GetSpot(self):
        return _mcp.MVanillaStrategy_GetSpot(self)

    def GetForward(self):
        return _mcp.MVanillaStrategy_GetForward(self)

    def GetFwdPoints(self):
        return _mcp.MVanillaStrategy_GetFwdPoints(self)

    def Price(self):
        return _mcp.MVanillaStrategy_Price(self)

    def Delta(self, isTermCcy=True, isAmount=True):
        return _mcp.MVanillaStrategy_Delta(self, isTermCcy, isAmount)

    def ForwardDelta(self, isTermCcy=True, isAmount=True):
        return _mcp.MVanillaStrategy_ForwardDelta(self, isTermCcy, isAmount)

    def Gamma(self, isTermCcy, isAmount):
        return _mcp.MVanillaStrategy_Gamma(self, isTermCcy, isAmount)

    def Vega(self, isTermCcy, isAmount):
        return _mcp.MVanillaStrategy_Vega(self, isTermCcy, isAmount)

    def Theta(self, isTermCcy, isAmount):
        return _mcp.MVanillaStrategy_Theta(self, isTermCcy, isAmount)

    def Rho(self, isTermCcy, isAmount):
        return _mcp.MVanillaStrategy_Rho(self, isTermCcy, isAmount)

    def Phi(self, isTermCcy, isAmount):
        return _mcp.MVanillaStrategy_Phi(self, isTermCcy, isAmount)

    def Vanna(self, isTermCcy, isAmount):
        return _mcp.MVanillaStrategy_Vanna(self, isTermCcy, isAmount)

    def Volga(self, isTermCcy, isAmount):
        return _mcp.MVanillaStrategy_Volga(self, isTermCcy, isAmount)

    def Volatility(self):
        return _mcp.MVanillaStrategy_Volatility(self)

    def GetLegNames(self):
        return _mcp.MVanillaStrategy_GetLegNames(self)

    def GetLeg(self, legName):
        return _mcp.MVanillaStrategy_GetLeg(self, legName)

    def Dispose(self):
        return _mcp.MVanillaStrategy_Dispose(self)
MVanillaStrategy_swigregister = _mcp.MVanillaStrategy_swigregister
MVanillaStrategy_swigregister(MVanillaStrategy)

class MAsianSchedule(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MAsianSchedule, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MAsianSchedule, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _mcp.new_MAsianSchedule()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mcp.delete_MAsianSchedule
    __del__ = lambda self: None

    def GetAsianFixingDates(self, startDate, endDate, frequency, calendar):
        return _mcp.MAsianSchedule_GetAsianFixingDates(self, startDate, endDate, frequency, calendar)
MAsianSchedule_swigregister = _mcp.MAsianSchedule_swigregister
MAsianSchedule_swigregister(MAsianSchedule)

class MAsianOption(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MAsianOption, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MAsianOption, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _mcp.new_MAsianOption(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mcp.delete_MAsianOption
    __del__ = lambda self: None

    def GetReferenceDate(self):
        return _mcp.MAsianOption_GetReferenceDate(self)

    def GetExpiryDate(self):
        return _mcp.MAsianOption_GetExpiryDate(self)

    def GetSettlementDate(self):
        return _mcp.MAsianOption_GetSettlementDate(self)

    def GetDeliveryDate(self):
        return _mcp.MAsianOption_GetDeliveryDate(self)

    def GetSpot(self):
        return _mcp.MAsianOption_GetSpot(self)

    def GetBuySell(self):
        return _mcp.MAsianOption_GetBuySell(self)

    def GetStrike(self):
        return _mcp.MAsianOption_GetStrike(self)

    def GetCallPutType(self):
        return _mcp.MAsianOption_GetCallPutType(self)

    def GetFaceValue(self):
        return _mcp.MAsianOption_GetFaceValue(self)

    def GetTimeToExpiry(self):
        return _mcp.MAsianOption_GetTimeToExpiry(self)

    def GetTimeToDelivery(self):
        return _mcp.MAsianOption_GetTimeToDelivery(self)

    def GetTimeToSettlement(self):
        return _mcp.MAsianOption_GetTimeToSettlement(self)

    def GetAccRate(self):
        return _mcp.MAsianOption_GetAccRate(self)

    def GetUndRate(self):
        return _mcp.MAsianOption_GetUndRate(self)

    def GetVol(self):
        return _mcp.MAsianOption_GetVol(self)

    def GetForward(self):
        return _mcp.MAsianOption_GetForward(self)

    def GetAveRate(self):
        return _mcp.MAsianOption_GetAveRate(self)

    def GetNumFixings(self):
        return _mcp.MAsianOption_GetNumFixings(self)

    def GetNumFixDone(self):
        return _mcp.MAsianOption_GetNumFixDone(self)

    def MarketValue(self, isAmount):
        return _mcp.MAsianOption_MarketValue(self, isAmount)

    def DiscMarketValue(self, isAmount):
        return _mcp.MAsianOption_DiscMarketValue(self, isAmount)

    def PnL(self, isAmount, tradePrice):
        return _mcp.MAsianOption_PnL(self, isAmount, tradePrice)

    def DiscPnL(self, isAmount, tradePrice):
        return _mcp.MAsianOption_DiscPnL(self, isAmount, tradePrice)

    def GetFixingSchedule(self):
        return _mcp.MAsianOption_GetFixingSchedule(self)

    def Price(self, *args):
        return _mcp.MAsianOption_Price(self, *args)

    def Delta(self, isCCY2=False, isAmount=True, npricingMethod=1):
        return _mcp.MAsianOption_Delta(self, isCCY2, isAmount, npricingMethod)

    def Gamma(self, isCCY2=False, isAmount=True, npricingMethod=1):
        return _mcp.MAsianOption_Gamma(self, isCCY2, isAmount, npricingMethod)

    def Vega(self, isCCY2=False, isAmount=True, npricingMethod=1):
        return _mcp.MAsianOption_Vega(self, isCCY2, isAmount, npricingMethod)

    def Theta(self, isCCY2=False, isAmount=True, npricingMethod=1):
        return _mcp.MAsianOption_Theta(self, isCCY2, isAmount, npricingMethod)

    def Rho(self, isCCY2=False, isAmount=True, npricingMethod=1):
        return _mcp.MAsianOption_Rho(self, isCCY2, isAmount, npricingMethod)

    def Phi(self, isCCY2=False, isAmount=True, npricingMethod=1):
        return _mcp.MAsianOption_Phi(self, isCCY2, isAmount, npricingMethod)

    def Vanna(self, isCCY2=False, isAmount=True, npricingMethod=1):
        return _mcp.MAsianOption_Vanna(self, isCCY2, isAmount, npricingMethod)

    def Volga(self, isCCY2=False, isAmount=True, npricingMethod=1):
        return _mcp.MAsianOption_Volga(self, isCCY2, isAmount, npricingMethod)

    def ForwardDelta(self, isCCY2=False, isAmount=True, npricingMethod=1):
        return _mcp.MAsianOption_ForwardDelta(self, isCCY2, isAmount, npricingMethod)

    def Payoff(self, *args):
        return _mcp.MAsianOption_Payoff(self, *args)

    def VolImpliedFromPrice(self, price):
        return _mcp.MAsianOption_VolImpliedFromPrice(self, price)

    def StrikeImpliedFromPrice(self, price):
        return _mcp.MAsianOption_StrikeImpliedFromPrice(self, price)

    def MonteCarloPrice(self, runMode):
        return _mcp.MAsianOption_MonteCarloPrice(self, runMode)

    def Dispose(self):
        return _mcp.MAsianOption_Dispose(self)
MAsianOption_swigregister = _mcp.MAsianOption_swigregister
MAsianOption_swigregister(MAsianOption)

class MFXForward(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MFXForward, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MFXForward, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _mcp.new_MFXForward(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mcp.delete_MFXForward
    __del__ = lambda self: None

    def GetReferenceDate(self):
        return _mcp.MFXForward_GetReferenceDate(self)

    def GetSpotDate(self):
        return _mcp.MFXForward_GetSpotDate(self)

    def GetBuySell(self):
        return _mcp.MFXForward_GetBuySell(self)

    def GetExpiryDate(self):
        return _mcp.MFXForward_GetExpiryDate(self)

    def GetSettlementDate(self):
        return _mcp.MFXForward_GetSettlementDate(self)

    def GetCalendar(self):
        return _mcp.MFXForward_GetCalendar(self)

    def GetFaceValue(self):
        return _mcp.MFXForward_GetFaceValue(self)

    def GetStrike(self):
        return _mcp.MFXForward_GetStrike(self)

    def GetTimeToExpiry(self):
        return _mcp.MFXForward_GetTimeToExpiry(self)

    def GetTimeToDelivery(self):
        return _mcp.MFXForward_GetTimeToDelivery(self)

    def GetSpot(self):
        return _mcp.MFXForward_GetSpot(self)

    def GetAccRate(self):
        return _mcp.MFXForward_GetAccRate(self)

    def GetUndRate(self):
        return _mcp.MFXForward_GetUndRate(self)

    def GetForward(self):
        return _mcp.MFXForward_GetForward(self)

    def MarketValue(self, isAmount=True):
        return _mcp.MFXForward_MarketValue(self, isAmount)

    def PV(self, isAmount=True):
        return _mcp.MFXForward_PV(self, isAmount)

    def PnL(self, isAmount=True, tradePrice=0.0):
        return _mcp.MFXForward_PnL(self, isAmount, tradePrice)

    def DiscPnL(self, isAmount=True, tradePrice=0.0):
        return _mcp.MFXForward_DiscPnL(self, isAmount, tradePrice)

    def DiscMarketValue(self, isAmount=True):
        return _mcp.MFXForward_DiscMarketValue(self, isAmount)

    def Price(self, *args):
        return _mcp.MFXForward_Price(self, *args)

    def Delta(self, isCCY2=False, isAmount=True):
        return _mcp.MFXForward_Delta(self, isCCY2, isAmount)

    def Gamma(self, isCCY2=False, isAmount=True):
        return _mcp.MFXForward_Gamma(self, isCCY2, isAmount)

    def Vega(self, isCCY2=False, isAmount=True):
        return _mcp.MFXForward_Vega(self, isCCY2, isAmount)

    def Theta(self, isCCY2=False, isAmount=True):
        return _mcp.MFXForward_Theta(self, isCCY2, isAmount)

    def Rho(self, isCCY2=False, isAmount=True):
        return _mcp.MFXForward_Rho(self, isCCY2, isAmount)

    def Phi(self, isCCY2=False, isAmount=True):
        return _mcp.MFXForward_Phi(self, isCCY2, isAmount)

    def ForwardDelta(self, isCCY2=False, isAmount=True):
        return _mcp.MFXForward_ForwardDelta(self, isCCY2, isAmount)

    def Vanna(self, isCCY2=False, isAmount=True):
        return _mcp.MFXForward_Vanna(self, isCCY2, isAmount)

    def Volga(self, isCCY2=False, isAmount=True):
        return _mcp.MFXForward_Volga(self, isCCY2, isAmount)

    def Payoff(self, *args):
        return _mcp.MFXForward_Payoff(self, *args)

    def Dispose(self):
        return _mcp.MFXForward_Dispose(self)
MFXForward_swigregister = _mcp.MFXForward_swigregister
MFXForward_swigregister(MFXForward)

class MFXForward2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MFXForward2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MFXForward2, name)
    __repr__ = _swig_repr

    def __init__(self, strike, fxForwardPointsCurve2, discountCurve, settlementDate, buySell=1, faceAmount=1.0, side=-1):
        this = _mcp.new_MFXForward2(strike, fxForwardPointsCurve2, discountCurve, settlementDate, buySell, faceAmount, side)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mcp.delete_MFXForward2
    __del__ = lambda self: None

    def GetForward(self, *args):
        return _mcp.MFXForward2_GetForward(self, *args)

    def MarketValue(self, isAmount=True):
        return _mcp.MFXForward2_MarketValue(self, isAmount)

    def PV(self, isAmount=True):
        return _mcp.MFXForward2_PV(self, isAmount)

    def Price(self, isAmount=True):
        return _mcp.MFXForward2_Price(self, isAmount)

    def Delta(self, isCCY2=False, isAmount=True):
        return _mcp.MFXForward2_Delta(self, isCCY2, isAmount)

    def Gamma(self, isCCY2=False, isAmount=True):
        return _mcp.MFXForward2_Gamma(self, isCCY2, isAmount)

    def Vega(self, isCCY2=False, isAmount=True):
        return _mcp.MFXForward2_Vega(self, isCCY2, isAmount)

    def Theta(self, isCCY2=False, isAmount=True):
        return _mcp.MFXForward2_Theta(self, isCCY2, isAmount)

    def Rho(self, isCCY2=False, isAmount=True):
        return _mcp.MFXForward2_Rho(self, isCCY2, isAmount)

    def ForwardDelta(self, isCCY2=False, isAmount=True):
        return _mcp.MFXForward2_ForwardDelta(self, isCCY2, isAmount)

    def Vanna(self, isCCY2=False, isAmount=True):
        return _mcp.MFXForward2_Vanna(self, isCCY2, isAmount)

    def Volga(self, isCCY2=False, isAmount=True):
        return _mcp.MFXForward2_Volga(self, isCCY2, isAmount)

    def Dispose(self):
        return _mcp.MFXForward2_Dispose(self)
MFXForward2_swigregister = _mcp.MFXForward2_swigregister
MFXForward2_swigregister(MFXForward2)

class MVanillaBarriers(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MVanillaBarriers, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MVanillaBarriers, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _mcp.new_MVanillaBarriers(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mcp.delete_MVanillaBarriers
    __del__ = lambda self: None

    def dVanillaOption(self, spot, strike, discRateCCR, costOfCarryCCR, volatility, tv, td, callOrPut):
        return _mcp.MVanillaBarriers_dVanillaOption(self, spot, strike, discRateCCR, costOfCarryCCR, volatility, tv, td, callOrPut)

    def dAmericanCall(self, spot, strike, discRateCCR, costOfCarryCCR, volatility, tv, td):
        return _mcp.MVanillaBarriers_dAmericanCall(self, spot, strike, discRateCCR, costOfCarryCCR, volatility, tv, td)

    def dAmericanPut(self, spot, strike, discRateCCR, costOfCarryCCR, volatility, tv, td):
        return _mcp.MVanillaBarriers_dAmericanPut(self, spot, strike, discRateCCR, costOfCarryCCR, volatility, tv, td)

    def dDownInCall(self, spot, strike, barrier, rebate, discRateCCR, costOfCarryCCR, volatility, tv, td, adjTable, adjustmentOnly):
        return _mcp.MVanillaBarriers_dDownInCall(self, spot, strike, barrier, rebate, discRateCCR, costOfCarryCCR, volatility, tv, td, adjTable, adjustmentOnly)

    def dDownInPut(self, spot, strike, barrier, rebate, discRateCCR, costOfCarryCCR, volatility, tv, td, adjTable, adjustmentOnly):
        return _mcp.MVanillaBarriers_dDownInPut(self, spot, strike, barrier, rebate, discRateCCR, costOfCarryCCR, volatility, tv, td, adjTable, adjustmentOnly)

    def dDownOutCall(self, spot, strike, barrier, rebate, discRateCCR, costOfCarryCCR, volatility, tv, td, adjTable, adjustmentOnly):
        return _mcp.MVanillaBarriers_dDownOutCall(self, spot, strike, barrier, rebate, discRateCCR, costOfCarryCCR, volatility, tv, td, adjTable, adjustmentOnly)

    def dDownOutPut(self, spot, strike, barrier, rebate, discRateCCR, costOfCarryCCR, volatility, tv, td, adjTable, adjustmentOnly):
        return _mcp.MVanillaBarriers_dDownOutPut(self, spot, strike, barrier, rebate, discRateCCR, costOfCarryCCR, volatility, tv, td, adjTable, adjustmentOnly)

    def dUpInCall(self, spot, strike, barrier, rebate, discRateCCR, costOfCarryCCR, volatility, tv, td, adjTable, adjustmentOnly):
        return _mcp.MVanillaBarriers_dUpInCall(self, spot, strike, barrier, rebate, discRateCCR, costOfCarryCCR, volatility, tv, td, adjTable, adjustmentOnly)

    def dUpInPut(self, spot, strike, barrier, rebate, discRateCCR, costOfCarryCCR, volatility, tv, td, adjTable, adjustmentOnly):
        return _mcp.MVanillaBarriers_dUpInPut(self, spot, strike, barrier, rebate, discRateCCR, costOfCarryCCR, volatility, tv, td, adjTable, adjustmentOnly)

    def dUpOutCall(self, spot, strike, barrier, rebate, discRateCCR, costOfCarryCCR, volatility, tv, td, adjTable, adjustmentOnly):
        return _mcp.MVanillaBarriers_dUpOutCall(self, spot, strike, barrier, rebate, discRateCCR, costOfCarryCCR, volatility, tv, td, adjTable, adjustmentOnly)

    def dUpOutPut(self, spot, strike, barrier, rebate, discRateCCR, costOfCarryCCR, volatility, tv, td, adjTable, adjustmentOnly):
        return _mcp.MVanillaBarriers_dUpOutPut(self, spot, strike, barrier, rebate, discRateCCR, costOfCarryCCR, volatility, tv, td, adjTable, adjustmentOnly)

    def dDoubleBarrierInCall(self, spot, strike, lowbarrier, highbarrier, discRateCCR, costOfCarryCCR, volatility, tv, td, adjTable, AdjustOrPrice):
        return _mcp.MVanillaBarriers_dDoubleBarrierInCall(self, spot, strike, lowbarrier, highbarrier, discRateCCR, costOfCarryCCR, volatility, tv, td, adjTable, AdjustOrPrice)

    def dDoubleBarrierInPut(self, spot, strike, lowbarrier, highbarrier, discRateCCR, costOfCarryCCR, volatility, tv, td, adjTable, AdjustOrPrice):
        return _mcp.MVanillaBarriers_dDoubleBarrierInPut(self, spot, strike, lowbarrier, highbarrier, discRateCCR, costOfCarryCCR, volatility, tv, td, adjTable, AdjustOrPrice)

    def dDoubleBarrierOutCall(self, spot, strike, lowbarrier, highbarrier, discRateCCR, costOfCarryCCR, volatility, tv, td, adjTable, AdjustOrPrice):
        return _mcp.MVanillaBarriers_dDoubleBarrierOutCall(self, spot, strike, lowbarrier, highbarrier, discRateCCR, costOfCarryCCR, volatility, tv, td, adjTable, AdjustOrPrice)

    def dDoubleBarrierOutPut(self, spot, strike, lowbarrier, highbarrier, discRateCCR, costOfCarryCCR, volatility, tv, td, adjTable, AdjustOrPrice):
        return _mcp.MVanillaBarriers_dDoubleBarrierOutPut(self, spot, strike, lowbarrier, highbarrier, discRateCCR, costOfCarryCCR, volatility, tv, td, adjTable, AdjustOrPrice)

    def Payoff(self, *args):
        return _mcp.MVanillaBarriers_Payoff(self, *args)

    def MarketValue(self, isAmount=True):
        return _mcp.MVanillaBarriers_MarketValue(self, isAmount)

    def DiscMarketValue(self, isAmount=True):
        return _mcp.MVanillaBarriers_DiscMarketValue(self, isAmount)

    def PnL(self, isAmount=True, tradePrice=0.0):
        return _mcp.MVanillaBarriers_PnL(self, isAmount, tradePrice)

    def DiscPnL(self, isAmount=True, tradePrice=0.0):
        return _mcp.MVanillaBarriers_DiscPnL(self, isAmount, tradePrice)

    def Price(self, *args):
        return _mcp.MVanillaBarriers_Price(self, *args)

    def Delta(self, isCCY2=False, isAmount=True, npricingMethod=1):
        return _mcp.MVanillaBarriers_Delta(self, isCCY2, isAmount, npricingMethod)

    def Gamma(self, isCCY2=False, isAmount=True, npricingMethod=1):
        return _mcp.MVanillaBarriers_Gamma(self, isCCY2, isAmount, npricingMethod)

    def Vega(self, isCCY2=False, isAmount=True, npricingMethod=1):
        return _mcp.MVanillaBarriers_Vega(self, isCCY2, isAmount, npricingMethod)

    def Theta(self, isCCY2=False, isAmount=True, npricingMethod=1):
        return _mcp.MVanillaBarriers_Theta(self, isCCY2, isAmount, npricingMethod)

    def Rho(self, isCCY2=False, isAmount=True, npricingMethod=1):
        return _mcp.MVanillaBarriers_Rho(self, isCCY2, isAmount, npricingMethod)

    def Phi(self, isCCY2=False, isAmount=True, npricingMethod=1):
        return _mcp.MVanillaBarriers_Phi(self, isCCY2, isAmount, npricingMethod)

    def Vanna(self, isCCY2=False, isAmount=True, npricingMethod=1):
        return _mcp.MVanillaBarriers_Vanna(self, isCCY2, isAmount, npricingMethod)

    def Volga(self, isCCY2=False, isAmount=True, npricingMethod=1):
        return _mcp.MVanillaBarriers_Volga(self, isCCY2, isAmount, npricingMethod)

    def ForwardDelta(self, isCCY2=False, isAmount=True, npricingMethod=1):
        return _mcp.MVanillaBarriers_ForwardDelta(self, isCCY2, isAmount, npricingMethod)

    def Dispose(self):
        return _mcp.MVanillaBarriers_Dispose(self)
MVanillaBarriers_swigregister = _mcp.MVanillaBarriers_swigregister
MVanillaBarriers_swigregister(MVanillaBarriers)

class MDigitals(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDigitals, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDigitals, name)
    __repr__ = _swig_repr

    def dAssetOrNothingCall(self, spot, strike, discRateCCR, costOfCarryCCR, volatility, tv, td):
        return _mcp.MDigitals_dAssetOrNothingCall(self, spot, strike, discRateCCR, costOfCarryCCR, volatility, tv, td)

    def dAssetOrNothingPut(self, spot, strike, discRateCCR, costOfCarryCCR, volatility, tv, td):
        return _mcp.MDigitals_dAssetOrNothingPut(self, spot, strike, discRateCCR, costOfCarryCCR, volatility, tv, td)

    def dCashOrNothingCall(self, spot, strike, payoff, discRateCCR, costOfCarryCCR, volatility, tv, td):
        return _mcp.MDigitals_dCashOrNothingCall(self, spot, strike, payoff, discRateCCR, costOfCarryCCR, volatility, tv, td)

    def dCashOrNothingPut(self, spot, strike, payoff, discRateCCR, costOfCarryCCR, volatility, tv, td):
        return _mcp.MDigitals_dCashOrNothingPut(self, spot, strike, payoff, discRateCCR, costOfCarryCCR, volatility, tv, td)

    def dDownCashAtTouch(self, spot, strike, payoff, discRateCCR, costOfCarryCCR, volatility, tv, td):
        return _mcp.MDigitals_dDownCashAtTouch(self, spot, strike, payoff, discRateCCR, costOfCarryCCR, volatility, tv, td)

    def dDownAssetAtTouch(self, spot, strike, discRateCCR, costOfCarryCCR, volatility, tv, td):
        return _mcp.MDigitals_dDownAssetAtTouch(self, spot, strike, discRateCCR, costOfCarryCCR, volatility, tv, td)

    def dDownInAssetAtExpiry(self, spot, strike, discRateCCR, costOfCarryCCR, volatility, tv, td):
        return _mcp.MDigitals_dDownInAssetAtExpiry(self, spot, strike, discRateCCR, costOfCarryCCR, volatility, tv, td)

    def dDownInAssetCall(self, spot, strike, barrier, discRateCCR, costOfCarryCCR, volatility, tv, td):
        return _mcp.MDigitals_dDownInAssetCall(self, spot, strike, barrier, discRateCCR, costOfCarryCCR, volatility, tv, td)

    def dDownOutAssetPut(self, spot, strike, barrier, discRateCCR, costOfCarryCCR, volatility, tv, td):
        return _mcp.MDigitals_dDownOutAssetPut(self, spot, strike, barrier, discRateCCR, costOfCarryCCR, volatility, tv, td)

    def __init__(self):
        this = _mcp.new_MDigitals()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mcp.delete_MDigitals
    __del__ = lambda self: None
MDigitals_swigregister = _mcp.MDigitals_swigregister
MDigitals_swigregister(MDigitals)

class MEuropeanDigital(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEuropeanDigital, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MEuropeanDigital, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _mcp.new_MEuropeanDigital(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mcp.delete_MEuropeanDigital
    __del__ = lambda self: None

    def Payoff(self, *args):
        return _mcp.MEuropeanDigital_Payoff(self, *args)

    def MarketValue(self, isAmount=True):
        return _mcp.MEuropeanDigital_MarketValue(self, isAmount)

    def DiscMarketValue(self, isAmount=True):
        return _mcp.MEuropeanDigital_DiscMarketValue(self, isAmount)

    def PnL(self, isAmount=True, tradePrice=0.0):
        return _mcp.MEuropeanDigital_PnL(self, isAmount, tradePrice)

    def DiscPnL(self, isAmount=True, tradePrice=0.0):
        return _mcp.MEuropeanDigital_DiscPnL(self, isAmount, tradePrice)

    def GetTurningPoints(self):
        return _mcp.MEuropeanDigital_GetTurningPoints(self)

    def Price(self, *args):
        return _mcp.MEuropeanDigital_Price(self, *args)

    def Delta(self, isCCY2=False, isAmount=True, npricingMethod=1):
        return _mcp.MEuropeanDigital_Delta(self, isCCY2, isAmount, npricingMethod)

    def Gamma(self, isCCY2=False, isAmount=True, npricingMethod=1):
        return _mcp.MEuropeanDigital_Gamma(self, isCCY2, isAmount, npricingMethod)

    def Vega(self, isCCY2=False, isAmount=True, npricingMethod=1):
        return _mcp.MEuropeanDigital_Vega(self, isCCY2, isAmount, npricingMethod)

    def Theta(self, isCCY2=False, isAmount=True, npricingMethod=1):
        return _mcp.MEuropeanDigital_Theta(self, isCCY2, isAmount, npricingMethod)

    def Rho(self, isCCY2=False, isAmount=True, npricingMethod=1):
        return _mcp.MEuropeanDigital_Rho(self, isCCY2, isAmount, npricingMethod)

    def Phi(self, isCCY2=False, isAmount=True, npricingMethod=1):
        return _mcp.MEuropeanDigital_Phi(self, isCCY2, isAmount, npricingMethod)

    def Vanna(self, isCCY2=False, isAmount=True, npricingMethod=1):
        return _mcp.MEuropeanDigital_Vanna(self, isCCY2, isAmount, npricingMethod)

    def Volga(self, isCCY2=False, isAmount=True, npricingMethod=1):
        return _mcp.MEuropeanDigital_Volga(self, isCCY2, isAmount, npricingMethod)

    def ForwardDelta(self, isCCY2=False, isAmount=True, npricingMethod=1):
        return _mcp.MEuropeanDigital_ForwardDelta(self, isCCY2, isAmount, npricingMethod)

    def Dispose(self):
        return _mcp.MEuropeanDigital_Dispose(self)
MEuropeanDigital_swigregister = _mcp.MEuropeanDigital_swigregister
MEuropeanDigital_swigregister(MEuropeanDigital)

class MBSVanilla(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MBSVanilla, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MBSVanilla, name)
    __repr__ = _swig_repr

    def StrikeImpliedFromDelta(self, callputType, delta, volatility, timeToExpiry, timeToSettlement, foreignRate, accRate, spot, forward, guessStrike, isDeltaRHS):
        return _mcp.MBSVanilla_StrikeImpliedFromDelta(self, callputType, delta, volatility, timeToExpiry, timeToSettlement, foreignRate, accRate, spot, forward, guessStrike, isDeltaRHS)

    def DeltaImpliedFromStrike(self, callputType, impliedStrikePx, volatility, timeToExpiry, timeToSettlement, foreignRate, accRate, spot, isDeltaRHS):
        return _mcp.MBSVanilla_DeltaImpliedFromStrike(self, callputType, impliedStrikePx, volatility, timeToExpiry, timeToSettlement, foreignRate, accRate, spot, isDeltaRHS)

    def VolImpliedFromPrice(self, callputType, spot, timeToExpiry, timeToSettlement, strike, foreignRate, accRate, price, guessVolatility, tolerance, maxNumIterations):
        return _mcp.MBSVanilla_VolImpliedFromPrice(self, callputType, spot, timeToExpiry, timeToSettlement, strike, foreignRate, accRate, price, guessVolatility, tolerance, maxNumIterations)

    def VolImpliedFromForwardPrice(self, callputType, strike, forward, timeToExpiry, forwardPrice, lowerBound):
        return _mcp.MBSVanilla_VolImpliedFromForwardPrice(self, callputType, strike, forward, timeToExpiry, forwardPrice, lowerBound)

    def StrikeImpliedFromPrice(self, callputType, price, volatility, timeToExpiry, timeToSettlement, accRate, foreignRate, spot):
        return _mcp.MBSVanilla_StrikeImpliedFromPrice(self, callputType, price, volatility, timeToExpiry, timeToSettlement, accRate, foreignRate, spot)

    def __init__(self):
        this = _mcp.new_MBSVanilla()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mcp.delete_MBSVanilla
    __del__ = lambda self: None
MBSVanilla_swigregister = _mcp.MBSVanilla_swigregister
MBSVanilla_swigregister(MBSVanilla)

class MVanillaCompound(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MVanillaCompound, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MVanillaCompound, name)
    __repr__ = _swig_repr

    def Price(self):
        return _mcp.MVanillaCompound_Price(self)

    def Delta(self, deltaRHS):
        return _mcp.MVanillaCompound_Delta(self, deltaRHS)

    def Gamma(self):
        return _mcp.MVanillaCompound_Gamma(self)

    def Vega(self):
        return _mcp.MVanillaCompound_Vega(self)

    def VegaDigital(self):
        return _mcp.MVanillaCompound_VegaDigital(self)

    def VegaIDDigital(self):
        return _mcp.MVanillaCompound_VegaIDDigital(self)

    def Dd1Dvol(self):
        return _mcp.MVanillaCompound_Dd1Dvol(self)

    def DvegaDvol(self):
        return _mcp.MVanillaCompound_DvegaDvol(self)

    def DvegaDvol2(self):
        return _mcp.MVanillaCompound_DvegaDvol2(self)

    def DvegaDspot(self):
        return _mcp.MVanillaCompound_DvegaDspot(self)

    def GetSpot(self):
        return _mcp.MVanillaCompound_GetSpot(self)

    def GetBuySell(self):
        return _mcp.MVanillaCompound_GetBuySell(self)

    def GetTimeToExpiry(self):
        return _mcp.MVanillaCompound_GetTimeToExpiry(self)

    def GetTimeToSettlement(self):
        return _mcp.MVanillaCompound_GetTimeToSettlement(self)

    def GetStrike(self):
        return _mcp.MVanillaCompound_GetStrike(self)

    def GetLever(self):
        return _mcp.MVanillaCompound_GetLever(self)

    def GetAccRate(self):
        return _mcp.MVanillaCompound_GetAccRate(self)

    def GetUndRate(self):
        return _mcp.MVanillaCompound_GetUndRate(self)

    def GetFaceValue(self):
        return _mcp.MVanillaCompound_GetFaceValue(self)

    def GetLegs(self):
        return _mcp.MVanillaCompound_GetLegs(self)

    def Payoff(self, valuationDate):
        return _mcp.MVanillaCompound_Payoff(self, valuationDate)

    def GetReferenceDate(self):
        return _mcp.MVanillaCompound_GetReferenceDate(self)

    def GetExpiryDate(self):
        return _mcp.MVanillaCompound_GetExpiryDate(self)

    def GetSettlementDate(self):
        return _mcp.MVanillaCompound_GetSettlementDate(self)

    def __init__(self):
        this = _mcp.new_MVanillaCompound()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mcp.delete_MVanillaCompound
    __del__ = lambda self: None
MVanillaCompound_swigregister = _mcp.MVanillaCompound_swigregister
MVanillaCompound_swigregister(MVanillaCompound)

class MRatioForward(MVanillaCompound):
    __swig_setmethods__ = {}
    for _s in [MVanillaCompound]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MRatioForward, name, value)
    __swig_getmethods__ = {}
    for _s in [MVanillaCompound]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MRatioForward, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _mcp.delete_MRatioForward
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _mcp.new_MRatioForward(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Price(self):
        return _mcp.MRatioForward_Price(self)

    def GetReferenceDate(self):
        return _mcp.MRatioForward_GetReferenceDate(self)

    def GetExpiryDate(self):
        return _mcp.MRatioForward_GetExpiryDate(self)

    def GetSettlementDate(self):
        return _mcp.MRatioForward_GetSettlementDate(self)

    def GetSpot(self):
        return _mcp.MRatioForward_GetSpot(self)

    def GetBuySell(self):
        return _mcp.MRatioForward_GetBuySell(self)

    def GetTimeToExpiry(self):
        return _mcp.MRatioForward_GetTimeToExpiry(self)

    def GetTimeToSettlement(self):
        return _mcp.MRatioForward_GetTimeToSettlement(self)

    def GetStrike(self):
        return _mcp.MRatioForward_GetStrike(self)

    def GetLever(self):
        return _mcp.MRatioForward_GetLever(self)

    def GetAccRate(self):
        return _mcp.MRatioForward_GetAccRate(self)

    def GetUndRate(self):
        return _mcp.MRatioForward_GetUndRate(self)

    def GetForward(self):
        return _mcp.MRatioForward_GetForward(self)

    def GetVol(self):
        return _mcp.MRatioForward_GetVol(self)

    def GetLegs(self):
        return _mcp.MRatioForward_GetLegs(self)

    def Payoff(self, valuationDate, spotX):
        return _mcp.MRatioForward_Payoff(self, valuationDate, spotX)

    def StrikeImpliedFromPrice(self, *args):
        return _mcp.MRatioForward_StrikeImpliedFromPrice(self, *args)
MRatioForward_swigregister = _mcp.MRatioForward_swigregister
MRatioForward_swigregister(MRatioForward)

class MSchedVanillaCompound(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MSchedVanillaCompound, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MSchedVanillaCompound, name)
    __repr__ = _swig_repr

    def Price(self):
        return _mcp.MSchedVanillaCompound_Price(self)

    def GetSpot(self):
        return _mcp.MSchedVanillaCompound_GetSpot(self)

    def GetBuySell(self):
        return _mcp.MSchedVanillaCompound_GetBuySell(self)

    def GetFrequency(self):
        return _mcp.MSchedVanillaCompound_GetFrequency(self)

    def GetLeverage(self):
        return _mcp.MSchedVanillaCompound_GetLeverage(self)

    def GetStrike(self):
        return _mcp.MSchedVanillaCompound_GetStrike(self)

    def GetTimeToMaturity(self):
        return _mcp.MSchedVanillaCompound_GetTimeToMaturity(self)

    def GetTimeToSettlement(self):
        return _mcp.MSchedVanillaCompound_GetTimeToSettlement(self)

    def GetAccRates(self):
        return _mcp.MSchedVanillaCompound_GetAccRates(self)

    def GetUndRates(self):
        return _mcp.MSchedVanillaCompound_GetUndRates(self)

    def GetVols(self):
        return _mcp.MSchedVanillaCompound_GetVols(self)

    def GetReferenceDate(self):
        return _mcp.MSchedVanillaCompound_GetReferenceDate(self)

    def GetMaturityDate(self):
        return _mcp.MSchedVanillaCompound_GetMaturityDate(self)

    def GetFirstSettlementDate(self):
        return _mcp.MSchedVanillaCompound_GetFirstSettlementDate(self)

    def GetPriceSettlementDate(self):
        return _mcp.MSchedVanillaCompound_GetPriceSettlementDate(self)

    def Payoff(self, valuationDate):
        return _mcp.MSchedVanillaCompound_Payoff(self, valuationDate)

    def __init__(self):
        this = _mcp.new_MSchedVanillaCompound()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mcp.delete_MSchedVanillaCompound
    __del__ = lambda self: None
MSchedVanillaCompound_swigregister = _mcp.MSchedVanillaCompound_swigregister
MSchedVanillaCompound_swigregister(MSchedVanillaCompound)

class MSchedRatioForward(MSchedVanillaCompound):
    __swig_setmethods__ = {}
    for _s in [MSchedVanillaCompound]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MSchedRatioForward, name, value)
    __swig_getmethods__ = {}
    for _s in [MSchedVanillaCompound]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MSchedRatioForward, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _mcp.delete_MSchedRatioForward
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _mcp.new_MSchedRatioForward(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetReferenceDate(self):
        return _mcp.MSchedRatioForward_GetReferenceDate(self)

    def GetMaturityDate(self):
        return _mcp.MSchedRatioForward_GetMaturityDate(self)

    def GetFirstSettlementDate(self):
        return _mcp.MSchedRatioForward_GetFirstSettlementDate(self)

    def GetPriceSettlementDate(self):
        return _mcp.MSchedRatioForward_GetPriceSettlementDate(self)

    def GetFrequency(self):
        return _mcp.MSchedRatioForward_GetFrequency(self)

    def GetSpot(self):
        return _mcp.MSchedRatioForward_GetSpot(self)

    def GetBuySell(self):
        return _mcp.MSchedRatioForward_GetBuySell(self)

    def GetLeverage(self):
        return _mcp.MSchedRatioForward_GetLeverage(self)

    def GetStrike(self):
        return _mcp.MSchedRatioForward_GetStrike(self)

    def GetAccRates(self):
        return _mcp.MSchedRatioForward_GetAccRates(self)

    def GetUndRates(self):
        return _mcp.MSchedRatioForward_GetUndRates(self)

    def GetVols(self):
        return _mcp.MSchedRatioForward_GetVols(self)

    def GetRatioForwardsSize(self):
        return _mcp.MSchedRatioForward_GetRatioForwardsSize(self)

    def GetRatioForward(self, npos):
        return _mcp.MSchedRatioForward_GetRatioForward(self, npos)

    def Price(self):
        return _mcp.MSchedRatioForward_Price(self)

    def StrikeFromPrice(self, price):
        return _mcp.MSchedRatioForward_StrikeFromPrice(self, price)

    def StrikeImpliedFromPrice(self, spot, buySell, timeToExpirys, timeToSettlements, timeToPriceSettlement, price, lever, accRates, undRates, vols):
        return _mcp.MSchedRatioForward_StrikeImpliedFromPrice(self, spot, buySell, timeToExpirys, timeToSettlements, timeToPriceSettlement, price, lever, accRates, undRates, vols)
MSchedRatioForward_swigregister = _mcp.MSchedRatioForward_swigregister
MSchedRatioForward_swigregister(MSchedRatioForward)

class MParForward(MVanillaCompound):
    __swig_setmethods__ = {}
    for _s in [MVanillaCompound]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MParForward, name, value)
    __swig_getmethods__ = {}
    for _s in [MVanillaCompound]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MParForward, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _mcp.delete_MParForward
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _mcp.new_MParForward(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Price(self):
        return _mcp.MParForward_Price(self)

    def GetReferenceDate(self):
        return _mcp.MParForward_GetReferenceDate(self)

    def GetExpiryDate(self):
        return _mcp.MParForward_GetExpiryDate(self)

    def GetSettlementDate(self):
        return _mcp.MParForward_GetSettlementDate(self)

    def GetDeliveryDate(self):
        return _mcp.MParForward_GetDeliveryDate(self)

    def GetSpot(self):
        return _mcp.MParForward_GetSpot(self)

    def GetBuySell(self):
        return _mcp.MParForward_GetBuySell(self)

    def GetTimeToExpiry(self):
        return _mcp.MParForward_GetTimeToExpiry(self)

    def GetTimeToSettlement(self):
        return _mcp.MParForward_GetTimeToSettlement(self)

    def GetTimeToDelivery(self):
        return _mcp.MParForward_GetTimeToDelivery(self)

    def GetStrike(self):
        return _mcp.MParForward_GetStrike(self)

    def GetAccRate(self):
        return _mcp.MParForward_GetAccRate(self)

    def GetUndRate(self):
        return _mcp.MParForward_GetUndRate(self)

    def GetForward(self):
        return _mcp.MParForward_GetForward(self)

    def GetVol(self):
        return _mcp.MParForward_GetVol(self)

    def GetLegs(self):
        return _mcp.MParForward_GetLegs(self)

    def StrikeImpliedFromPrice(self, *args):
        return _mcp.MParForward_StrikeImpliedFromPrice(self, *args)

    def Payoff(self, valuationDate):
        return _mcp.MParForward_Payoff(self, valuationDate)
MParForward_swigregister = _mcp.MParForward_swigregister
MParForward_swigregister(MParForward)

class MOvernightRateCurveData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MOvernightRateCurveData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MOvernightRateCurveData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _mcp.new_MOvernightRateCurveData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mcp.delete_MOvernightRateCurveData
    __del__ = lambda self: None

    def getHandler(self):
        return _mcp.MOvernightRateCurveData_getHandler(self)
MOvernightRateCurveData_swigregister = _mcp.MOvernightRateCurveData_swigregister
MOvernightRateCurveData_swigregister(MOvernightRateCurveData)

class MBillCurveData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MBillCurveData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MBillCurveData, name)
    __repr__ = _swig_repr

    def __init__(self, nmode, dayCounter, settlementDate, maturityDates, yields, bumpAmounts, bUses):
        this = _mcp.new_MBillCurveData(nmode, dayCounter, settlementDate, maturityDates, yields, bumpAmounts, bUses)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mcp.delete_MBillCurveData
    __del__ = lambda self: None

    def getHandler(self):
        return _mcp.MBillCurveData_getHandler(self)
MBillCurveData_swigregister = _mcp.MBillCurveData_swigregister
MBillCurveData_swigregister(MBillCurveData)

class MBillFutureCurveData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MBillFutureCurveData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MBillFutureCurveData, name)
    __repr__ = _swig_repr

    def __init__(self, nmode, dayCounter, settlementDates, maturityDates, yields, convexities, bumpAmounts, bUses):
        this = _mcp.new_MBillFutureCurveData(nmode, dayCounter, settlementDates, maturityDates, yields, convexities, bumpAmounts, bUses)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mcp.delete_MBillFutureCurveData
    __del__ = lambda self: None

    def getHandler(self):
        return _mcp.MBillFutureCurveData_getHandler(self)
MBillFutureCurveData_swigregister = _mcp.MBillFutureCurveData_swigregister
MBillFutureCurveData_swigregister(MBillFutureCurveData)

class MVanillaSwapCurveData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MVanillaSwapCurveData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MVanillaSwapCurveData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _mcp.new_MVanillaSwapCurveData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mcp.delete_MVanillaSwapCurveData
    __del__ = lambda self: None

    def getHandler(self):
        return _mcp.MVanillaSwapCurveData_getHandler(self)
MVanillaSwapCurveData_swigregister = _mcp.MVanillaSwapCurveData_swigregister
MVanillaSwapCurveData_swigregister(MVanillaSwapCurveData)

class MRateConvention(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MRateConvention, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MRateConvention, name)
    __repr__ = _swig_repr

    def __init__(self, conventionName):
        this = _mcp.new_MRateConvention(conventionName)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mcp.delete_MRateConvention
    __del__ = lambda self: None

    def getHandler(self):
        return _mcp.MRateConvention_getHandler(self)

    def toString(self):
        return _mcp.MRateConvention_toString(self)

    def swapStartLag(self):
        return _mcp.MRateConvention_swapStartLag(self)

    def paymentDateAdjuster(self):
        return _mcp.MRateConvention_paymentDateAdjuster(self)

    def accrualDateAdjuster(self):
        return _mcp.MRateConvention_accrualDateAdjuster(self)

    def fixedDayCounter(self):
        return _mcp.MRateConvention_fixedDayCounter(self)

    def floatDayCounter(self):
        return _mcp.MRateConvention_floatDayCounter(self)

    def fixingMethod(self):
        return _mcp.MRateConvention_fixingMethod(self)

    def useIndexEstimation(self):
        return _mcp.MRateConvention_useIndexEstimation(self)

    def fixInAdvance(self):
        return _mcp.MRateConvention_fixInAdvance(self)

    def fixDaysBackward(self):
        return _mcp.MRateConvention_fixDaysBackward(self)

    def margin(self):
        return _mcp.MRateConvention_margin(self)

    def conventionName(self):
        return _mcp.MRateConvention_conventionName(self)

    def floatTenor(self):
        return _mcp.MRateConvention_floatTenor(self)
MRateConvention_swigregister = _mcp.MRateConvention_swigregister
MRateConvention_swigregister(MRateConvention)

class MCalibrationSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MCalibrationSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MCalibrationSet, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _mcp.new_MCalibrationSet()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def addData(self, curveData):
        return _mcp.MCalibrationSet_addData(self, curveData)

    def addEnd(self):
        return _mcp.MCalibrationSet_addEnd(self)
    __swig_destroy__ = _mcp.delete_MCalibrationSet
    __del__ = lambda self: None

    def getHandler(self):
        return _mcp.MCalibrationSet_getHandler(self)
MCalibrationSet_swigregister = _mcp.MCalibrationSet_swigregister
MCalibrationSet_swigregister(MCalibrationSet)

class MFixedRateBondCurveData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MFixedRateBondCurveData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MFixedRateBondCurveData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _mcp.new_MFixedRateBondCurveData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mcp.delete_MFixedRateBondCurveData
    __del__ = lambda self: None

    def getHandler(self):
        return _mcp.MFixedRateBondCurveData_getHandler(self)
MFixedRateBondCurveData_swigregister = _mcp.MFixedRateBondCurveData_swigregister
MFixedRateBondCurveData_swigregister(MFixedRateBondCurveData)

class MSwapCurve(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MSwapCurve, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MSwapCurve, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _mcp.new_MSwapCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mcp.delete_MSwapCurve
    __del__ = lambda self: None

    def CloneCurve(self, settlementDate):
        return _mcp.MSwapCurve_CloneCurve(self, settlementDate)

    def GetRefDate(self):
        return _mcp.MSwapCurve_GetRefDate(self)

    def ForwardRate(self, startDate, endDate, dayCounter=1, compounding=True, frequency=1):
        return _mcp.MSwapCurve_ForwardRate(self, startDate, endDate, dayCounter, compounding, frequency)

    def DiscountFactor(self, endDate):
        return _mcp.MSwapCurve_DiscountFactor(self, endDate)

    def ZeroRate(self, endDate):
        return _mcp.MSwapCurve_ZeroRate(self, endDate)

    def ParSwapRate(self, *args):
        return _mcp.MSwapCurve_ParSwapRate(self, *args)

    def Roll(self, *args):
        return _mcp.MSwapCurve_Roll(self, *args)

    def Carry(self, *args):
        return _mcp.MSwapCurve_Carry(self, *args)

    def getHandler(self):
        return _mcp.MSwapCurve_getHandler(self)
MSwapCurve_swigregister = _mcp.MSwapCurve_swigregister
MSwapCurve_swigregister(MSwapCurve)

class MBondCurve(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MBondCurve, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MBondCurve, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _mcp.delete_MBondCurve
    __del__ = lambda self: None

    def DiscountFactor(self, endDate):
        return _mcp.MBondCurve_DiscountFactor(self, endDate)

    def ForwardRate(self, startDate, endDate, dayCounter, compounding, frequency):
        return _mcp.MBondCurve_ForwardRate(self, startDate, endDate, dayCounter, compounding, frequency)

    def ZeroRate(self, endDate):
        return _mcp.MBondCurve_ZeroRate(self, endDate)

    def ParRate(self, endDate):
        return _mcp.MBondCurve_ParRate(self, endDate)

    def BumpCurve(self, bumpSize):
        return _mcp.MBondCurve_BumpCurve(self, bumpSize)

    def CloneCurve(self, settlementDate):
        return _mcp.MBondCurve_CloneCurve(self, settlementDate)

    def __init__(self, *args):
        this = _mcp.new_MBondCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getHandler(self):
        return _mcp.MBondCurve_getHandler(self)
MBondCurve_swigregister = _mcp.MBondCurve_swigregister
MBondCurve_swigregister(MBondCurve)

class MYieldCurve(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MYieldCurve, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MYieldCurve, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _mcp.new_MYieldCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CloneCurve(self, newReferenceDate):
        return _mcp.MYieldCurve_CloneCurve(self, newReferenceDate)

    def BumpCurve(self, bumpSize):
        return _mcp.MYieldCurve_BumpCurve(self, bumpSize)

    def ZeroRate(self, endDate):
        return _mcp.MYieldCurve_ZeroRate(self, endDate)

    def DiscountFactor(self, *args):
        return _mcp.MYieldCurve_DiscountFactor(self, *args)

    def ForwardRate(self, startDate, endDate, dayCounter=1, compounding=True, frequency=1):
        return _mcp.MYieldCurve_ForwardRate(self, startDate, endDate, dayCounter, compounding, frequency)

    def GetRefDate(self):
        return _mcp.MYieldCurve_GetRefDate(self)

    def getHandler(self):
        return _mcp.MYieldCurve_getHandler(self)
    __swig_destroy__ = _mcp.delete_MYieldCurve
    __del__ = lambda self: None

    def Dispose(self):
        return _mcp.MYieldCurve_Dispose(self)
MYieldCurve_swigregister = _mcp.MYieldCurve_swigregister
MYieldCurve_swigregister(MYieldCurve)

class MParametricCurve(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MParametricCurve, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MParametricCurve, name)
    __repr__ = _swig_repr

    def __init__(self, referenceDate, maturityDates, rates, paramCurveModel, dayCounter):
        this = _mcp.new_MParametricCurve(referenceDate, maturityDates, rates, paramCurveModel, dayCounter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def DiscountFactor(self, endDate):
        return _mcp.MParametricCurve_DiscountFactor(self, endDate)

    def ForwardRate(self, startDate, endDate, dayCounter, compounding, frequency):
        return _mcp.MParametricCurve_ForwardRate(self, startDate, endDate, dayCounter, compounding, frequency)

    def ZeroRate(self, endDate):
        return _mcp.MParametricCurve_ZeroRate(self, endDate)

    def Parameters(self):
        return _mcp.MParametricCurve_Parameters(self)

    def getHandler(self):
        return _mcp.MParametricCurve_getHandler(self)
    __swig_destroy__ = _mcp.delete_MParametricCurve
    __del__ = lambda self: None
MParametricCurve_swigregister = _mcp.MParametricCurve_swigregister
MParametricCurve_swigregister(MParametricCurve)

class MVanillaSwap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MVanillaSwap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MVanillaSwap, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _mcp.new_MVanillaSwap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mcp.delete_MVanillaSwap
    __del__ = lambda self: None

    def Clone(self, newStartDate, newEndDate):
        return _mcp.MVanillaSwap_Clone(self, newStartDate, newEndDate)

    def NPV(self):
        return _mcp.MVanillaSwap_NPV(self)

    def MarketValue(self):
        return _mcp.MVanillaSwap_MarketValue(self)

    def Premium(self):
        return _mcp.MVanillaSwap_Premium(self)

    def Accrued(self):
        return _mcp.MVanillaSwap_Accrued(self)

    def MarketParRate(self):
        return _mcp.MVanillaSwap_MarketParRate(self)

    def PVBP(self):
        return _mcp.MVanillaSwap_PVBP(self)

    def PV01(self):
        return _mcp.MVanillaSwap_PV01(self)

    def DV01(self):
        return _mcp.MVanillaSwap_DV01(self)

    def Duration(self):
        return _mcp.MVanillaSwap_Duration(self)

    def MDuration(self):
        return _mcp.MVanillaSwap_MDuration(self)

    def Annuity(self):
        return _mcp.MVanillaSwap_Annuity(self)

    def CalculateSwapRateFromNPV(self, npv):
        return _mcp.MVanillaSwap_CalculateSwapRateFromNPV(self, npv)

    def CalculateFloatingMarginFromNPV(self, npv):
        return _mcp.MVanillaSwap_CalculateFloatingMarginFromNPV(self, npv)

    def FixedLegAnnuity(self):
        return _mcp.MVanillaSwap_FixedLegAnnuity(self)

    def FixedLegDuration(self):
        return _mcp.MVanillaSwap_FixedLegDuration(self)

    def FixedLegMDuration(self):
        return _mcp.MVanillaSwap_FixedLegMDuration(self)

    def FixedLegCumPV(self):
        return _mcp.MVanillaSwap_FixedLegCumPV(self)

    def FloatingLegAnnuity(self):
        return _mcp.MVanillaSwap_FloatingLegAnnuity(self)

    def FloatingLegDuration(self):
        return _mcp.MVanillaSwap_FloatingLegDuration(self)

    def FloatingLegMDuration(self):
        return _mcp.MVanillaSwap_FloatingLegMDuration(self)

    def FloatingLegCumPV(self):
        return _mcp.MVanillaSwap_FloatingLegCumPV(self)

    def FixedLegPVBP(self):
        return _mcp.MVanillaSwap_FixedLegPVBP(self)

    def FixedLegPV01(self):
        return _mcp.MVanillaSwap_FixedLegPV01(self)

    def FixedLegDV01(self):
        return _mcp.MVanillaSwap_FixedLegDV01(self)

    def FixedLegNPV(self):
        return _mcp.MVanillaSwap_FixedLegNPV(self)

    def FixedLegPremium(self):
        return _mcp.MVanillaSwap_FixedLegPremium(self)

    def FixedLegPaymentDates(self):
        return _mcp.MVanillaSwap_FixedLegPaymentDates(self)

    def FixedLegAccrued(self):
        return _mcp.MVanillaSwap_FixedLegAccrued(self)

    def FixedLegMarketValue(self):
        return _mcp.MVanillaSwap_FixedLegMarketValue(self)

    def FixedLegAccrStartDates(self):
        return _mcp.MVanillaSwap_FixedLegAccrStartDates(self)

    def FixedLegAccrEndDates(self):
        return _mcp.MVanillaSwap_FixedLegAccrEndDates(self)

    def FixedLegAccrDays(self):
        return _mcp.MVanillaSwap_FixedLegAccrDays(self)

    def FixedLegAccrYearFrac(self):
        return _mcp.MVanillaSwap_FixedLegAccrYearFrac(self)

    def FixedLegAccrRates(self):
        return _mcp.MVanillaSwap_FixedLegAccrRates(self)

    def FixedLegPayments(self):
        return _mcp.MVanillaSwap_FixedLegPayments(self)

    def FixedLegDiscountFactors(self):
        return _mcp.MVanillaSwap_FixedLegDiscountFactors(self)

    def FixedLegPVs(self):
        return _mcp.MVanillaSwap_FixedLegPVs(self)

    def FixedLegCumPVs(self):
        return _mcp.MVanillaSwap_FixedLegCumPVs(self)

    def FixedLegPaymentDateYearFracs(self):
        return _mcp.MVanillaSwap_FixedLegPaymentDateYearFracs(self)

    def FixedLegAmortAmounts(self):
        return _mcp.MVanillaSwap_FixedLegAmortAmounts(self)

    def FixedLegResidualAmounts(self):
        return _mcp.MVanillaSwap_FixedLegResidualAmounts(self)

    def FixedLegNotionals(self):
        return _mcp.MVanillaSwap_FixedLegNotionals(self)

    def FixedLegResetDates(self):
        return _mcp.MVanillaSwap_FixedLegResetDates(self)

    def FixedLegResetStartDates(self):
        return _mcp.MVanillaSwap_FixedLegResetStartDates(self)

    def FixedLegResetEndDates(self):
        return _mcp.MVanillaSwap_FixedLegResetEndDates(self)

    def FixedLegResetDays(self):
        return _mcp.MVanillaSwap_FixedLegResetDays(self)

    def FixedLegResetYearFrac(self):
        return _mcp.MVanillaSwap_FixedLegResetYearFrac(self)

    def FixedLegResetRates(self):
        return _mcp.MVanillaSwap_FixedLegResetRates(self)

    def FloatingLegPVBP(self):
        return _mcp.MVanillaSwap_FloatingLegPVBP(self)

    def FloatingLegPV01(self):
        return _mcp.MVanillaSwap_FloatingLegPV01(self)

    def FloatingLegDV01(self):
        return _mcp.MVanillaSwap_FloatingLegDV01(self)

    def FloatingLegNPV(self):
        return _mcp.MVanillaSwap_FloatingLegNPV(self)

    def FloatingLegPremium(self):
        return _mcp.MVanillaSwap_FloatingLegPremium(self)

    def FloatingLegPaymentDates(self):
        return _mcp.MVanillaSwap_FloatingLegPaymentDates(self)

    def FloatingLegAccrued(self):
        return _mcp.MVanillaSwap_FloatingLegAccrued(self)

    def FloatingLegMarketValue(self):
        return _mcp.MVanillaSwap_FloatingLegMarketValue(self)

    def FloatingLegAccrStartDates(self):
        return _mcp.MVanillaSwap_FloatingLegAccrStartDates(self)

    def FloatingLegAccrEndDates(self):
        return _mcp.MVanillaSwap_FloatingLegAccrEndDates(self)

    def FloatingLegAccrDays(self):
        return _mcp.MVanillaSwap_FloatingLegAccrDays(self)

    def FloatingLegAccrYearFrac(self):
        return _mcp.MVanillaSwap_FloatingLegAccrYearFrac(self)

    def FloatingLegAccrRates(self):
        return _mcp.MVanillaSwap_FloatingLegAccrRates(self)

    def FloatingLegPayments(self):
        return _mcp.MVanillaSwap_FloatingLegPayments(self)

    def FloatingLegDiscountFactors(self):
        return _mcp.MVanillaSwap_FloatingLegDiscountFactors(self)

    def FloatingLegPVs(self):
        return _mcp.MVanillaSwap_FloatingLegPVs(self)

    def FloatingLegCumPVs(self):
        return _mcp.MVanillaSwap_FloatingLegCumPVs(self)

    def FloatingLegPaymentDateYearFracs(self):
        return _mcp.MVanillaSwap_FloatingLegPaymentDateYearFracs(self)

    def FloatingLegAmortAmounts(self):
        return _mcp.MVanillaSwap_FloatingLegAmortAmounts(self)

    def FloatingLegResidualAmounts(self):
        return _mcp.MVanillaSwap_FloatingLegResidualAmounts(self)

    def FloatingLegNotionals(self):
        return _mcp.MVanillaSwap_FloatingLegNotionals(self)

    def FloatingLegResetDates(self):
        return _mcp.MVanillaSwap_FloatingLegResetDates(self)

    def FloatingLegResetStartDates(self):
        return _mcp.MVanillaSwap_FloatingLegResetStartDates(self)

    def FloatingLegResetEndDates(self):
        return _mcp.MVanillaSwap_FloatingLegResetEndDates(self)

    def FloatingLegResetDays(self):
        return _mcp.MVanillaSwap_FloatingLegResetDays(self)

    def FloatingLegResetYearFrac(self):
        return _mcp.MVanillaSwap_FloatingLegResetYearFrac(self)

    def FloatingLegResetRates(self):
        return _mcp.MVanillaSwap_FloatingLegResetRates(self)

    def FloatingLegQuoteDates(self):
        return _mcp.MVanillaSwap_FloatingLegQuoteDates(self)

    def FloatingLegQuoteValueDates(self):
        return _mcp.MVanillaSwap_FloatingLegQuoteValueDates(self)

    def FloatingLegQuoteRates(self):
        return _mcp.MVanillaSwap_FloatingLegQuoteRates(self)

    def FloatingLegQuoteTypes(self):
        return _mcp.MVanillaSwap_FloatingLegQuoteTypes(self)

    def FixedLegCumCF(self):
        return _mcp.MVanillaSwap_FixedLegCumCF(self)

    def FloatingLegCumCF(self):
        return _mcp.MVanillaSwap_FloatingLegCumCF(self)

    def FixedLegCFs(self):
        return _mcp.MVanillaSwap_FixedLegCFs(self)

    def FloatingLegCFs(self):
        return _mcp.MVanillaSwap_FloatingLegCFs(self)

    def FixedLegCFDates(self):
        return _mcp.MVanillaSwap_FixedLegCFDates(self)

    def FloatingLegCFDates(self):
        return _mcp.MVanillaSwap_FloatingLegCFDates(self)

    def FixedLegCFTypes(self):
        return _mcp.MVanillaSwap_FixedLegCFTypes(self)

    def FloatingLegCFTypes(self):
        return _mcp.MVanillaSwap_FloatingLegCFTypes(self)

    def FixedLegHasInitialExchange(self):
        return _mcp.MVanillaSwap_FixedLegHasInitialExchange(self)

    def FloatingLegHasInitialExchange(self):
        return _mcp.MVanillaSwap_FloatingLegHasInitialExchange(self)

    def FloatingLegCalResetRate(self, startDate, fixingDates, quoteRates, fixingRateMethod):
        return _mcp.MVanillaSwap_FloatingLegCalResetRate(self, startDate, fixingDates, quoteRates, fixingRateMethod)

    def FloatingLegFixInAdvance(self):
        return _mcp.MVanillaSwap_FloatingLegFixInAdvance(self)

    def CF(self):
        return _mcp.MVanillaSwap_CF(self)

    def ValuationDayCF(self):
        return _mcp.MVanillaSwap_ValuationDayCF(self)

    def SumDelta(self):
        return _mcp.MVanillaSwap_SumDelta(self)

    def PNL(self, start, end):
        return _mcp.MVanillaSwap_PNL(self, start, end)

    def FrtbGirrDeltas(self, ccyLocRate=1.0):
        return _mcp.MVanillaSwap_FrtbGirrDeltas(self, ccyLocRate)

    def FrtbFxDelta(self, ccyLocRate):
        return _mcp.MVanillaSwap_FrtbFxDelta(self, ccyLocRate)

    def Carry(self, *args):
        return _mcp.MVanillaSwap_Carry(self, *args)

    def Roll(self, *args):
        return _mcp.MVanillaSwap_Roll(self, *args)

    def GetReferenceDate(self):
        return _mcp.MVanillaSwap_GetReferenceDate(self)

    def GetStartDate(self):
        return _mcp.MVanillaSwap_GetStartDate(self)

    def GetEndDate(self):
        return _mcp.MVanillaSwap_GetEndDate(self)

    def getHandler(self):
        return _mcp.MVanillaSwap_getHandler(self)
MVanillaSwap_swigregister = _mcp.MVanillaSwap_swigregister
MVanillaSwap_swigregister(MVanillaSwap)

class MCurrencySwapLeg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MCurrencySwapLeg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MCurrencySwapLeg, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _mcp.new_MCurrencySwapLeg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mcp.delete_MCurrencySwapLeg
    __del__ = lambda self: None

    def getHandler(self):
        return _mcp.MCurrencySwapLeg_getHandler(self)

    def PaymentDates(self):
        return _mcp.MCurrencySwapLeg_PaymentDates(self)

    def AccrStartDates(self):
        return _mcp.MCurrencySwapLeg_AccrStartDates(self)

    def AccrEndDates(self):
        return _mcp.MCurrencySwapLeg_AccrEndDates(self)

    def AccrDays(self):
        return _mcp.MCurrencySwapLeg_AccrDays(self)

    def AccrYearFrac(self):
        return _mcp.MCurrencySwapLeg_AccrYearFrac(self)

    def AccrRates(self):
        return _mcp.MCurrencySwapLeg_AccrRates(self)

    def Payments(self):
        return _mcp.MCurrencySwapLeg_Payments(self)

    def PaymentDateYearFracs(self):
        return _mcp.MCurrencySwapLeg_PaymentDateYearFracs(self)

    def DiscountFactors(self):
        return _mcp.MCurrencySwapLeg_DiscountFactors(self)

    def PVs(self):
        return _mcp.MCurrencySwapLeg_PVs(self)

    def CumPVs(self):
        return _mcp.MCurrencySwapLeg_CumPVs(self)

    def Annuity(self):
        return _mcp.MCurrencySwapLeg_Annuity(self)

    def Duration(self):
        return _mcp.MCurrencySwapLeg_Duration(self)

    def MDuration(self):
        return _mcp.MCurrencySwapLeg_MDuration(self)

    def PV01(self):
        return _mcp.MCurrencySwapLeg_PV01(self)

    def CFs(self):
        return _mcp.MCurrencySwapLeg_CFs(self)

    def CumCF(self):
        return _mcp.MCurrencySwapLeg_CumCF(self)

    def CumPV(self):
        return _mcp.MCurrencySwapLeg_CumPV(self)

    def Premium(self):
        return _mcp.MCurrencySwapLeg_Premium(self)

    def NPV(self):
        return _mcp.MCurrencySwapLeg_NPV(self)

    def MarketValue(self):
        return _mcp.MCurrencySwapLeg_MarketValue(self)

    def ResetDates(self):
        return _mcp.MCurrencySwapLeg_ResetDates(self)

    def ResetStartDates(self):
        return _mcp.MCurrencySwapLeg_ResetStartDates(self)

    def ResetEndDates(self):
        return _mcp.MCurrencySwapLeg_ResetEndDates(self)

    def ResetDays(self):
        return _mcp.MCurrencySwapLeg_ResetDays(self)

    def ResetYearFrac(self):
        return _mcp.MCurrencySwapLeg_ResetYearFrac(self)

    def ResetRates(self):
        return _mcp.MCurrencySwapLeg_ResetRates(self)

    def QuoteDates(self):
        return _mcp.MCurrencySwapLeg_QuoteDates(self)

    def QuoteValueDates(self):
        return _mcp.MCurrencySwapLeg_QuoteValueDates(self)

    def QuoteRates(self):
        return _mcp.MCurrencySwapLeg_QuoteRates(self)

    def QuoteTypes(self):
        return _mcp.MCurrencySwapLeg_QuoteTypes(self)

    def isFloatingLeg(self):
        return _mcp.MCurrencySwapLeg_isFloatingLeg(self)

    def isFullLeg(self):
        return _mcp.MCurrencySwapLeg_isFullLeg(self)
MCurrencySwapLeg_swigregister = _mcp.MCurrencySwapLeg_swigregister
MCurrencySwapLeg_swigregister(MCurrencySwapLeg)

class MXCurrencySwap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MXCurrencySwap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MXCurrencySwap, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _mcp.new_MXCurrencySwap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mcp.delete_MXCurrencySwap
    __del__ = lambda self: None

    def NPV(self, isResultTermCurrency):
        return _mcp.MXCurrencySwap_NPV(self, isResultTermCurrency)

    def Premium(self, isResultTermCurrency):
        return _mcp.MXCurrencySwap_Premium(self, isResultTermCurrency)

    def Accrued(self, isResultTermCurrency):
        return _mcp.MXCurrencySwap_Accrued(self, isResultTermCurrency)

    def MarketValue(self, isResultTermCurrency):
        return _mcp.MXCurrencySwap_MarketValue(self, isResultTermCurrency)

    def MarketParRate(self):
        return _mcp.MXCurrencySwap_MarketParRate(self)

    def Duration(self):
        return _mcp.MXCurrencySwap_Duration(self)

    def MDuration(self):
        return _mcp.MXCurrencySwap_MDuration(self)

    def PV01(self):
        return _mcp.MXCurrencySwap_PV01(self)

    def DV01(self):
        return _mcp.MXCurrencySwap_DV01(self)

    def BaseLegAnnuity(self, isResultTermCurrency):
        return _mcp.MXCurrencySwap_BaseLegAnnuity(self, isResultTermCurrency)

    def BaseLegDuration(self):
        return _mcp.MXCurrencySwap_BaseLegDuration(self)

    def BaseLegMDuration(self):
        return _mcp.MXCurrencySwap_BaseLegMDuration(self)

    def BaseLegCumPV(self, isResultTermCurrency):
        return _mcp.MXCurrencySwap_BaseLegCumPV(self, isResultTermCurrency)

    def TermLegAnnuity(self, isResultTermCurrency):
        return _mcp.MXCurrencySwap_TermLegAnnuity(self, isResultTermCurrency)

    def TermLegDuration(self):
        return _mcp.MXCurrencySwap_TermLegDuration(self)

    def TermLegMDuration(self):
        return _mcp.MXCurrencySwap_TermLegMDuration(self)

    def TermLegCumPV(self, isResultTermCurrency):
        return _mcp.MXCurrencySwap_TermLegCumPV(self, isResultTermCurrency)

    def BaseLegPaymentDates(self):
        return _mcp.MXCurrencySwap_BaseLegPaymentDates(self)

    def BaseLegAccrStartDates(self):
        return _mcp.MXCurrencySwap_BaseLegAccrStartDates(self)

    def BaseLegAccrEndDates(self):
        return _mcp.MXCurrencySwap_BaseLegAccrEndDates(self)

    def BaseLegAccrDays(self):
        return _mcp.MXCurrencySwap_BaseLegAccrDays(self)

    def BaseLegAccrYearFrac(self):
        return _mcp.MXCurrencySwap_BaseLegAccrYearFrac(self)

    def BaseLegAccrRates(self):
        return _mcp.MXCurrencySwap_BaseLegAccrRates(self)

    def BaseLegAccrued(self, isResultTermCurrency):
        return _mcp.MXCurrencySwap_BaseLegAccrued(self, isResultTermCurrency)

    def BaseLegMarketValue(self, isResultTermCurrency):
        return _mcp.MXCurrencySwap_BaseLegMarketValue(self, isResultTermCurrency)

    def BaseLegNPV(self, isResultTermCurrency):
        return _mcp.MXCurrencySwap_BaseLegNPV(self, isResultTermCurrency)

    def BaseLegPayments(self, isResultTermCurrency):
        return _mcp.MXCurrencySwap_BaseLegPayments(self, isResultTermCurrency)

    def BaseLegDiscountFactors(self):
        return _mcp.MXCurrencySwap_BaseLegDiscountFactors(self)

    def BaseLegPVs(self, isResultTermCurrency):
        return _mcp.MXCurrencySwap_BaseLegPVs(self, isResultTermCurrency)

    def BaseLegCumPVs(self, isResultTermCurrency):
        return _mcp.MXCurrencySwap_BaseLegCumPVs(self, isResultTermCurrency)

    def BaseLegPaymentDateYearFracs(self):
        return _mcp.MXCurrencySwap_BaseLegPaymentDateYearFracs(self)

    def BaseLegResetDates(self):
        return _mcp.MXCurrencySwap_BaseLegResetDates(self)

    def BaseLegResetStartDates(self):
        return _mcp.MXCurrencySwap_BaseLegResetStartDates(self)

    def BaseLegResetEndDates(self):
        return _mcp.MXCurrencySwap_BaseLegResetEndDates(self)

    def BaseLegResetDays(self):
        return _mcp.MXCurrencySwap_BaseLegResetDays(self)

    def BaseLegResetYearFrac(self):
        return _mcp.MXCurrencySwap_BaseLegResetYearFrac(self)

    def BaseLegResetRates(self):
        return _mcp.MXCurrencySwap_BaseLegResetRates(self)

    def TermLegPaymentDates(self):
        return _mcp.MXCurrencySwap_TermLegPaymentDates(self)

    def TermLegAccrStartDates(self):
        return _mcp.MXCurrencySwap_TermLegAccrStartDates(self)

    def TermLegAccrEndDates(self):
        return _mcp.MXCurrencySwap_TermLegAccrEndDates(self)

    def TermLegAccrDays(self):
        return _mcp.MXCurrencySwap_TermLegAccrDays(self)

    def TermLegAccrYearFrac(self):
        return _mcp.MXCurrencySwap_TermLegAccrYearFrac(self)

    def TermLegAccrRates(self):
        return _mcp.MXCurrencySwap_TermLegAccrRates(self)

    def TermLegAccrued(self, isResultTermCurrency):
        return _mcp.MXCurrencySwap_TermLegAccrued(self, isResultTermCurrency)

    def TermLegMarketValue(self, isResultTermCurrency):
        return _mcp.MXCurrencySwap_TermLegMarketValue(self, isResultTermCurrency)

    def TermLegNPV(self, isResultTermCurrency):
        return _mcp.MXCurrencySwap_TermLegNPV(self, isResultTermCurrency)

    def TermLegPayments(self, isResultTermCurrency):
        return _mcp.MXCurrencySwap_TermLegPayments(self, isResultTermCurrency)

    def TermLegDiscountFactors(self):
        return _mcp.MXCurrencySwap_TermLegDiscountFactors(self)

    def TermLegPVs(self, isResultTermCurrency):
        return _mcp.MXCurrencySwap_TermLegPVs(self, isResultTermCurrency)

    def TermLegCumPVs(self, isResultTermCurrency):
        return _mcp.MXCurrencySwap_TermLegCumPVs(self, isResultTermCurrency)

    def TermLegPaymentDateYearFracs(self):
        return _mcp.MXCurrencySwap_TermLegPaymentDateYearFracs(self)

    def TermLegResetDates(self):
        return _mcp.MXCurrencySwap_TermLegResetDates(self)

    def TermLegResetStartDates(self):
        return _mcp.MXCurrencySwap_TermLegResetStartDates(self)

    def TermLegResetEndDates(self):
        return _mcp.MXCurrencySwap_TermLegResetEndDates(self)

    def TermLegResetDays(self):
        return _mcp.MXCurrencySwap_TermLegResetDays(self)

    def TermLegResetYearFrac(self):
        return _mcp.MXCurrencySwap_TermLegResetYearFrac(self)

    def TermLegResetRates(self):
        return _mcp.MXCurrencySwap_TermLegResetRates(self)

    def BaseLegQuoteDates(self):
        return _mcp.MXCurrencySwap_BaseLegQuoteDates(self)

    def BaseLegQuoteValueDates(self):
        return _mcp.MXCurrencySwap_BaseLegQuoteValueDates(self)

    def BaseLegQuoteRates(self):
        return _mcp.MXCurrencySwap_BaseLegQuoteRates(self)

    def BaseLegQuoteTypes(self):
        return _mcp.MXCurrencySwap_BaseLegQuoteTypes(self)

    def TermLegQuoteDates(self):
        return _mcp.MXCurrencySwap_TermLegQuoteDates(self)

    def TermLegQuoteValueDates(self):
        return _mcp.MXCurrencySwap_TermLegQuoteValueDates(self)

    def TermLegQuoteRates(self):
        return _mcp.MXCurrencySwap_TermLegQuoteRates(self)

    def TermLegQuoteTypes(self):
        return _mcp.MXCurrencySwap_TermLegQuoteTypes(self)

    def BaseLegCumCF(self, isResultTermCurrency):
        return _mcp.MXCurrencySwap_BaseLegCumCF(self, isResultTermCurrency)

    def TermLegCumCF(self, isResultTermCurrency):
        return _mcp.MXCurrencySwap_TermLegCumCF(self, isResultTermCurrency)

    def BaseLegCFs(self, isResultTermCurrency):
        return _mcp.MXCurrencySwap_BaseLegCFs(self, isResultTermCurrency)

    def TermLegCFs(self, isResultTermCurrency):
        return _mcp.MXCurrencySwap_TermLegCFs(self, isResultTermCurrency)

    def CF(self, isResultTermCurrency):
        return _mcp.MXCurrencySwap_CF(self, isResultTermCurrency)

    def ValuationDayCF(self, isResultTermCurrency):
        return _mcp.MXCurrencySwap_ValuationDayCF(self, isResultTermCurrency)

    def SumDelta(self):
        return _mcp.MXCurrencySwap_SumDelta(self)

    def PNL(self, start, end):
        return _mcp.MXCurrencySwap_PNL(self, start, end)

    def getHandler(self):
        return _mcp.MXCurrencySwap_getHandler(self)
MXCurrencySwap_swigregister = _mcp.MXCurrencySwap_swigregister
MXCurrencySwap_swigregister(MXCurrencySwap)

class MFixedRateBond(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MFixedRateBond, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MFixedRateBond, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _mcp.new_MFixedRateBond(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mcp.delete_MFixedRateBond
    __del__ = lambda self: None

    def CleanPriceFromYieldCHN(self, arg2, compounding, settleDateAdjust):
        return _mcp.MFixedRateBond_CleanPriceFromYieldCHN(self, arg2, compounding, settleDateAdjust)

    def DirtyPriceFromYieldCHN(self, arg2, compounding):
        return _mcp.MFixedRateBond_DirtyPriceFromYieldCHN(self, arg2, compounding)

    def YieldFromCleanPriceCHN(self, arg2, compounding):
        return _mcp.MFixedRateBond_YieldFromCleanPriceCHN(self, arg2, compounding)

    def YieldFromDirtyPriceCHN(self, arg2, compounding):
        return _mcp.MFixedRateBond_YieldFromDirtyPriceCHN(self, arg2, compounding)

    def AccruedDaysCHN(self):
        return _mcp.MFixedRateBond_AccruedDaysCHN(self)

    def AccruedInterestCHN(self):
        return _mcp.MFixedRateBond_AccruedInterestCHN(self)

    def PriceCHN(self, arg2):
        return _mcp.MFixedRateBond_PriceCHN(self, arg2)

    def DurationCHN(self, arg2):
        return _mcp.MFixedRateBond_DurationCHN(self, arg2)

    def MDurationCHN(self, arg2):
        return _mcp.MFixedRateBond_MDurationCHN(self, arg2)

    def PVBPCHN(self, arg2):
        return _mcp.MFixedRateBond_PVBPCHN(self, arg2)

    def ConvexityCHN(self, arg2):
        return _mcp.MFixedRateBond_ConvexityCHN(self, arg2)

    def ActualPaidInterest(self, fromDate, toDate):
        return _mcp.MFixedRateBond_ActualPaidInterest(self, fromDate, toDate)

    def ForwardPrice(self, arg2, forwardSettlementDate, discountCurve, isParametricCurve):
        return _mcp.MFixedRateBond_ForwardPrice(self, arg2, forwardSettlementDate, discountCurve, isParametricCurve)

    def RCPaidInterest(self, endDate):
        return _mcp.MFixedRateBond_RCPaidInterest(self, endDate)

    def RCConvergence(self, *args):
        return _mcp.MFixedRateBond_RCConvergence(self, *args)

    def RCRolldown(self, *args):
        return _mcp.MFixedRateBond_RCRolldown(self, *args)

    def RCReinvestReturn(self, endDate, investRate):
        return _mcp.MFixedRateBond_RCReinvestReturn(self, endDate, investRate)

    def RCMarketMove(self, *args):
        return _mcp.MFixedRateBond_RCMarketMove(self, *args)

    def RCRiddingReturn(self, bondCurve, movedBondCurve, endDate):
        return _mcp.MFixedRateBond_RCRiddingReturn(self, bondCurve, movedBondCurve, endDate)

    def AmCost(self, startDate, endDate, initCost):
        return _mcp.MFixedRateBond_AmCost(self, startDate, endDate, initCost)

    def AmEIR(self, startDate, endDate, initCost):
        return _mcp.MFixedRateBond_AmEIR(self, startDate, endDate, initCost)

    def AmERInstIncome(self, startDate, endDate, initCost):
        return _mcp.MFixedRateBond_AmERInstIncome(self, startDate, endDate, initCost)

    def AmAccuredIncome(self, startDate, endDate, initCost):
        return _mcp.MFixedRateBond_AmAccuredIncome(self, startDate, endDate, initCost)

    def AmCashflow(self, startDate, endDate, initCost):
        return _mcp.MFixedRateBond_AmCashflow(self, startDate, endDate, initCost)

    def Price(self, curve, isParametricCurve=False):
        return _mcp.MFixedRateBond_Price(self, curve, isParametricCurve)

    def FairValue(self, curve, isParametricCurve=False):
        return _mcp.MFixedRateBond_FairValue(self, curve, isParametricCurve)

    def GSpread(self, arg2, curve, isParametricCurve=False):
        return _mcp.MFixedRateBond_GSpread(self, arg2, curve, isParametricCurve)

    def ZSpread(self, arg2, curve, isParametricCurve=False):
        return _mcp.MFixedRateBond_ZSpread(self, arg2, curve, isParametricCurve)

    def TimeToMaturity(self):
        return _mcp.MFixedRateBond_TimeToMaturity(self)

    def GetRefDate(self):
        return _mcp.MFixedRateBond_GetRefDate(self)

    def MaturityDate(self):
        return _mcp.MFixedRateBond_MaturityDate(self)

    def CouponRate(self):
        return _mcp.MFixedRateBond_CouponRate(self)

    def CouponType(self):
        return _mcp.MFixedRateBond_CouponType(self)

    def PaymentDates(self):
        return _mcp.MFixedRateBond_PaymentDates(self)

    def Payments(self):
        return _mcp.MFixedRateBond_Payments(self)

    def FrtbGirrDeltas(self, bondCurve, ccyLocRate=1.0, isParametricCurve=False):
        return _mcp.MFixedRateBond_FrtbGirrDeltas(self, bondCurve, ccyLocRate, isParametricCurve)

    def FrtbFxDelta(self, arg2, ccyLocRate):
        return _mcp.MFixedRateBond_FrtbFxDelta(self, arg2, ccyLocRate)

    def FrtbGirrCurvature(self, bondCurve, isUp=True, ccyLocRate=1.0, isParametricCurve=False):
        return _mcp.MFixedRateBond_FrtbGirrCurvature(self, bondCurve, isUp, ccyLocRate, isParametricCurve)

    def KeyRateDuration(self, bondCurve, krdTenors, adjustWithEffectiveDuration=True, isParametricCurve=False):
        return _mcp.MFixedRateBond_KeyRateDuration(self, bondCurve, krdTenors, adjustWithEffectiveDuration, isParametricCurve)

    def PreviousCouponDate(self):
        return _mcp.MFixedRateBond_PreviousCouponDate(self)

    def NextCouponDate(self):
        return _mcp.MFixedRateBond_NextCouponDate(self)
MFixedRateBond_swigregister = _mcp.MFixedRateBond_swigregister
MFixedRateBond_swigregister(MFixedRateBond)

class MBond(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MBond, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MBond, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _mcp.new_MBond(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mcp.delete_MBond
    __del__ = lambda self: None

    def CleanPriceFromYieldCHN(self, arg2, compounding, settleDateAdjust):
        return _mcp.MBond_CleanPriceFromYieldCHN(self, arg2, compounding, settleDateAdjust)

    def DirtyPriceFromYieldCHN(self, arg2, compounding):
        return _mcp.MBond_DirtyPriceFromYieldCHN(self, arg2, compounding)

    def YieldFromCleanPriceCHN(self, arg2, compounding):
        return _mcp.MBond_YieldFromCleanPriceCHN(self, arg2, compounding)

    def YieldFromDirtyPriceCHN(self, arg2, compounding):
        return _mcp.MBond_YieldFromDirtyPriceCHN(self, arg2, compounding)

    def AccruedDaysCHN(self):
        return _mcp.MBond_AccruedDaysCHN(self)

    def AccruedInterestCHN(self):
        return _mcp.MBond_AccruedInterestCHN(self)

    def PriceCHN(self, arg2):
        return _mcp.MBond_PriceCHN(self, arg2)

    def DurationCHN(self, arg2):
        return _mcp.MBond_DurationCHN(self, arg2)

    def MDurationCHN(self, arg2):
        return _mcp.MBond_MDurationCHN(self, arg2)

    def PVBPCHN(self, arg2):
        return _mcp.MBond_PVBPCHN(self, arg2)

    def ConvexityCHN(self, arg2):
        return _mcp.MBond_ConvexityCHN(self, arg2)

    def ActualPaidInterest(self, fromDate, toDate):
        return _mcp.MBond_ActualPaidInterest(self, fromDate, toDate)

    def Price(self, curve, isParametricCurve=False):
        return _mcp.MBond_Price(self, curve, isParametricCurve)

    def FairValue(self, curve, isParametricCurve=False):
        return _mcp.MBond_FairValue(self, curve, isParametricCurve)

    def GSpread(self, arg2, curve, isParametricCurve=False):
        return _mcp.MBond_GSpread(self, arg2, curve, isParametricCurve)

    def ZSpread(self, arg2, curve, isParametricCurve=False):
        return _mcp.MBond_ZSpread(self, arg2, curve, isParametricCurve)

    def PaymentDates(self):
        return _mcp.MBond_PaymentDates(self)

    def Payments(self):
        return _mcp.MBond_Payments(self)

    def KeyRateDuration(self, bondCurve, krdTenors, adjustWithEffectiveDuration=True, isParametricCurve=False):
        return _mcp.MBond_KeyRateDuration(self, bondCurve, krdTenors, adjustWithEffectiveDuration, isParametricCurve)

    def TimetoMaturity(self):
        return _mcp.MBond_TimetoMaturity(self)

    def GetMaturityDate(self):
        return _mcp.MBond_GetMaturityDate(self)

    def CouponRate(self):
        return _mcp.MBond_CouponRate(self)

    def CouponType(self):
        return _mcp.MBond_CouponType(self)

    def PreviousCouponDate(self):
        return _mcp.MBond_PreviousCouponDate(self)

    def NextCouponDate(self):
        return _mcp.MBond_NextCouponDate(self)
MBond_swigregister = _mcp.MBond_swigregister
MBond_swigregister(MBond)

class MAdjustmentTable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MAdjustmentTable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MAdjustmentTable, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _mcp.new_MAdjustmentTable()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mcp.delete_MAdjustmentTable
    __del__ = lambda self: None

    def getHandler(self):
        return _mcp.MAdjustmentTable_getHandler(self)
MAdjustmentTable_swigregister = _mcp.MAdjustmentTable_swigregister
MAdjustmentTable_swigregister(MAdjustmentTable)

class TarfArgs(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TarfArgs, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TarfArgs, name)
    __repr__ = _swig_repr
    __swig_setmethods__["referenceDate"] = _mcp.TarfArgs_referenceDate_set
    __swig_getmethods__["referenceDate"] = _mcp.TarfArgs_referenceDate_get
    if _newclass:
        referenceDate = _swig_property(_mcp.TarfArgs_referenceDate_get, _mcp.TarfArgs_referenceDate_set)
    __swig_setmethods__["expiryDate"] = _mcp.TarfArgs_expiryDate_set
    __swig_getmethods__["expiryDate"] = _mcp.TarfArgs_expiryDate_get
    if _newclass:
        expiryDate = _swig_property(_mcp.TarfArgs_expiryDate_get, _mcp.TarfArgs_expiryDate_set)
    __swig_setmethods__["frequency"] = _mcp.TarfArgs_frequency_set
    __swig_getmethods__["frequency"] = _mcp.TarfArgs_frequency_get
    if _newclass:
        frequency = _swig_property(_mcp.TarfArgs_frequency_get, _mcp.TarfArgs_frequency_set)
    __swig_setmethods__["spot"] = _mcp.TarfArgs_spot_set
    __swig_getmethods__["spot"] = _mcp.TarfArgs_spot_get
    if _newclass:
        spot = _swig_property(_mcp.TarfArgs_spot_get, _mcp.TarfArgs_spot_set)
    __swig_setmethods__["strike"] = _mcp.TarfArgs_strike_set
    __swig_getmethods__["strike"] = _mcp.TarfArgs_strike_get
    if _newclass:
        strike = _swig_property(_mcp.TarfArgs_strike_get, _mcp.TarfArgs_strike_set)
    __swig_setmethods__["target"] = _mcp.TarfArgs_target_set
    __swig_getmethods__["target"] = _mcp.TarfArgs_target_get
    if _newclass:
        target = _swig_property(_mcp.TarfArgs_target_get, _mcp.TarfArgs_target_set)
    __swig_setmethods__["leverage"] = _mcp.TarfArgs_leverage_set
    __swig_getmethods__["leverage"] = _mcp.TarfArgs_leverage_get
    if _newclass:
        leverage = _swig_property(_mcp.TarfArgs_leverage_get, _mcp.TarfArgs_leverage_set)
    __swig_setmethods__["buySell"] = _mcp.TarfArgs_buySell_set
    __swig_getmethods__["buySell"] = _mcp.TarfArgs_buySell_get
    if _newclass:
        buySell = _swig_property(_mcp.TarfArgs_buySell_get, _mcp.TarfArgs_buySell_set)
    __swig_setmethods__["payoffStyle"] = _mcp.TarfArgs_payoffStyle_set
    __swig_getmethods__["payoffStyle"] = _mcp.TarfArgs_payoffStyle_get
    if _newclass:
        payoffStyle = _swig_property(_mcp.TarfArgs_payoffStyle_get, _mcp.TarfArgs_payoffStyle_set)
    __swig_setmethods__["faceValue"] = _mcp.TarfArgs_faceValue_set
    __swig_getmethods__["faceValue"] = _mcp.TarfArgs_faceValue_get
    if _newclass:
        faceValue = _swig_property(_mcp.TarfArgs_faceValue_get, _mcp.TarfArgs_faceValue_set)
    __swig_setmethods__["calendar"] = _mcp.TarfArgs_calendar_set
    __swig_getmethods__["calendar"] = _mcp.TarfArgs_calendar_get
    if _newclass:
        calendar = _swig_property(_mcp.TarfArgs_calendar_get, _mcp.TarfArgs_calendar_set)
    __swig_setmethods__["volSurface"] = _mcp.TarfArgs_volSurface_set
    __swig_getmethods__["volSurface"] = _mcp.TarfArgs_volSurface_get
    if _newclass:
        volSurface = _swig_property(_mcp.TarfArgs_volSurface_get, _mcp.TarfArgs_volSurface_set)
    __swig_setmethods__["prevSettlementDate"] = _mcp.TarfArgs_prevSettlementDate_set
    __swig_getmethods__["prevSettlementDate"] = _mcp.TarfArgs_prevSettlementDate_get
    if _newclass:
        prevSettlementDate = _swig_property(_mcp.TarfArgs_prevSettlementDate_get, _mcp.TarfArgs_prevSettlementDate_set)
    __swig_setmethods__["firstSettlementDate"] = _mcp.TarfArgs_firstSettlementDate_set
    __swig_getmethods__["firstSettlementDate"] = _mcp.TarfArgs_firstSettlementDate_get
    if _newclass:
        firstSettlementDate = _swig_property(_mcp.TarfArgs_firstSettlementDate_get, _mcp.TarfArgs_firstSettlementDate_set)
    __swig_setmethods__["dateAdjuster"] = _mcp.TarfArgs_dateAdjuster_set
    __swig_getmethods__["dateAdjuster"] = _mcp.TarfArgs_dateAdjuster_get
    if _newclass:
        dateAdjuster = _swig_property(_mcp.TarfArgs_dateAdjuster_get, _mcp.TarfArgs_dateAdjuster_set)
    __swig_setmethods__["endToEnd"] = _mcp.TarfArgs_endToEnd_set
    __swig_getmethods__["endToEnd"] = _mcp.TarfArgs_endToEnd_get
    if _newclass:
        endToEnd = _swig_property(_mcp.TarfArgs_endToEnd_get, _mcp.TarfArgs_endToEnd_set)
    __swig_setmethods__["longStub"] = _mcp.TarfArgs_longStub_set
    __swig_getmethods__["longStub"] = _mcp.TarfArgs_longStub_get
    if _newclass:
        longStub = _swig_property(_mcp.TarfArgs_longStub_get, _mcp.TarfArgs_longStub_set)
    __swig_setmethods__["endStub"] = _mcp.TarfArgs_endStub_set
    __swig_getmethods__["endStub"] = _mcp.TarfArgs_endStub_get
    if _newclass:
        endStub = _swig_property(_mcp.TarfArgs_endStub_get, _mcp.TarfArgs_endStub_set)
    __swig_setmethods__["dayCounter"] = _mcp.TarfArgs_dayCounter_set
    __swig_getmethods__["dayCounter"] = _mcp.TarfArgs_dayCounter_get
    if _newclass:
        dayCounter = _swig_property(_mcp.TarfArgs_dayCounter_get, _mcp.TarfArgs_dayCounter_set)
    __swig_setmethods__["applyDayCount"] = _mcp.TarfArgs_applyDayCount_set
    __swig_getmethods__["applyDayCount"] = _mcp.TarfArgs_applyDayCount_get
    if _newclass:
        applyDayCount = _swig_property(_mcp.TarfArgs_applyDayCount_get, _mcp.TarfArgs_applyDayCount_set)
    __swig_setmethods__["numSimulation"] = _mcp.TarfArgs_numSimulation_set
    __swig_getmethods__["numSimulation"] = _mcp.TarfArgs_numSimulation_get
    if _newclass:
        numSimulation = _swig_property(_mcp.TarfArgs_numSimulation_get, _mcp.TarfArgs_numSimulation_set)

    def __init__(self):
        this = _mcp.new_TarfArgs()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mcp.delete_TarfArgs
    __del__ = lambda self: None
TarfArgs_swigregister = _mcp.TarfArgs_swigregister
TarfArgs_swigregister(TarfArgs)

class PivotTarfArgs(TarfArgs):
    __swig_setmethods__ = {}
    for _s in [TarfArgs]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PivotTarfArgs, name, value)
    __swig_getmethods__ = {}
    for _s in [TarfArgs]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PivotTarfArgs, name)
    __repr__ = _swig_repr
    __swig_setmethods__["highStrike"] = _mcp.PivotTarfArgs_highStrike_set
    __swig_getmethods__["highStrike"] = _mcp.PivotTarfArgs_highStrike_get
    if _newclass:
        highStrike = _swig_property(_mcp.PivotTarfArgs_highStrike_get, _mcp.PivotTarfArgs_highStrike_set)
    __swig_setmethods__["lowStrike"] = _mcp.PivotTarfArgs_lowStrike_set
    __swig_getmethods__["lowStrike"] = _mcp.PivotTarfArgs_lowStrike_get
    if _newclass:
        lowStrike = _swig_property(_mcp.PivotTarfArgs_lowStrike_get, _mcp.PivotTarfArgs_lowStrike_set)
    __swig_setmethods__["pivot"] = _mcp.PivotTarfArgs_pivot_set
    __swig_getmethods__["pivot"] = _mcp.PivotTarfArgs_pivot_get
    if _newclass:
        pivot = _swig_property(_mcp.PivotTarfArgs_pivot_get, _mcp.PivotTarfArgs_pivot_set)

    def __init__(self):
        this = _mcp.new_PivotTarfArgs()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mcp.delete_PivotTarfArgs
    __del__ = lambda self: None
PivotTarfArgs_swigregister = _mcp.PivotTarfArgs_swigregister
PivotTarfArgs_swigregister(PivotTarfArgs)

class MTargetRedemptionForward(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MTargetRedemptionForward, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MTargetRedemptionForward, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _mcp.new_MTargetRedemptionForward(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mcp.delete_MTargetRedemptionForward
    __del__ = lambda self: None

    def Price(self, mode=-1):
        return _mcp.MTargetRedemptionForward_Price(self, mode)

    def FixingSchedule(self):
        return _mcp.MTargetRedemptionForward_FixingSchedule(self)

    def SettlementSchedule(self):
        return _mcp.MTargetRedemptionForward_SettlementSchedule(self)

    def TargetImpliedFromPrice(self, price, tolerance, maxNumIterations):
        return _mcp.MTargetRedemptionForward_TargetImpliedFromPrice(self, price, tolerance, maxNumIterations)

    def StrikeImpliedFromPrice(self, price, tolerance, maxNumIterations):
        return _mcp.MTargetRedemptionForward_StrikeImpliedFromPrice(self, price, tolerance, maxNumIterations)
MTargetRedemptionForward_swigregister = _mcp.MTargetRedemptionForward_swigregister
MTargetRedemptionForward_swigregister(MTargetRedemptionForward)

class MPivotTargetRedemptionForward(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MPivotTargetRedemptionForward, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MPivotTargetRedemptionForward, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _mcp.new_MPivotTargetRedemptionForward(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mcp.delete_MPivotTargetRedemptionForward
    __del__ = lambda self: None

    def Price(self, mode=-1):
        return _mcp.MPivotTargetRedemptionForward_Price(self, mode)

    def FixingSchedule(self):
        return _mcp.MPivotTargetRedemptionForward_FixingSchedule(self)

    def SettlementSchedule(self):
        return _mcp.MPivotTargetRedemptionForward_SettlementSchedule(self)

    def StrikeImpliedFromPrice(self, price, tolerance, maxNumIterations):
        return _mcp.MPivotTargetRedemptionForward_StrikeImpliedFromPrice(self, price, tolerance, maxNumIterations)
MPivotTargetRedemptionForward_swigregister = _mcp.MPivotTargetRedemptionForward_swigregister
MPivotTargetRedemptionForward_swigregister(MPivotTargetRedemptionForward)

class MCapVolStripping(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MCapVolStripping, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MCapVolStripping, name)
    __repr__ = _swig_repr

    def __init__(self, referenceDate, capLagDay, rateLagDay, tenor, strikes, term, marketQuotes, estimatingCurve, discountingCurve, calendar, convention, paymentType, volQuote, interpolationVariable, interpolationMethod, strippingMethod, nbrFuturesToUse):
        this = _mcp.new_MCapVolStripping(referenceDate, capLagDay, rateLagDay, tenor, strikes, term, marketQuotes, estimatingCurve, discountingCurve, calendar, convention, paymentType, volQuote, interpolationVariable, interpolationMethod, strippingMethod, nbrFuturesToUse)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mcp.delete_MCapVolStripping
    __del__ = lambda self: None

    def SpreadAtTAndK(self, capletExpiry, strike):
        return _mcp.MCapVolStripping_SpreadAtTAndK(self, capletExpiry, strike)

    def PriceATMVolAtT(self, capletExpiry):
        return _mcp.MCapVolStripping_PriceATMVolAtT(self, capletExpiry)

    def PriceVolAtTandK(self, capletExpiry, strike):
        return _mcp.MCapVolStripping_PriceVolAtTandK(self, capletExpiry, strike)

    def YieldATMVolAtT(self, capletExpiry):
        return _mcp.MCapVolStripping_YieldATMVolAtT(self, capletExpiry)

    def YieldVolAtTandK(self, capletExpiry, strike):
        return _mcp.MCapVolStripping_YieldVolAtTandK(self, capletExpiry, strike)

    def ATMRate(self, expiryDate):
        return _mcp.MCapVolStripping_ATMRate(self, expiryDate)

    def FairSwapRate(self, settlementDate, startDate, endDate):
        return _mcp.MCapVolStripping_FairSwapRate(self, settlementDate, startDate, endDate)

    def getHandler(self):
        return _mcp.MCapVolStripping_getHandler(self)
MCapVolStripping_swigregister = _mcp.MCapVolStripping_swigregister
MCapVolStripping_swigregister(MCapVolStripping)

class MSwaptionCube(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MSwaptionCube, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MSwaptionCube, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _mcp.new_MSwaptionCube(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mcp.delete_MSwaptionCube
    __del__ = lambda self: None

    def getVol(self, strike, expiryDate, maturity, isPeriod=False):
        return _mcp.MSwaptionCube_getVol(self, strike, expiryDate, maturity, isPeriod)

    def atmStrike(self, expiryDate, maturity, isPeriod=False):
        return _mcp.MSwaptionCube_atmStrike(self, expiryDate, maturity, isPeriod)

    def atmVol(self, expiryDate, maturity, isPeriod=False):
        return _mcp.MSwaptionCube_atmVol(self, expiryDate, maturity, isPeriod)

    def volCube(self, *args):
        return _mcp.MSwaptionCube_volCube(self, *args)

    def getHandler(self):
        return _mcp.MSwaptionCube_getHandler(self)
MSwaptionCube_swigregister = _mcp.MSwaptionCube_swigregister
MSwaptionCube_swigregister(MSwaptionCube)

class MPV01_Set(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MPV01_Set, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MPV01_Set, name)
    __repr__ = _swig_repr

    def __init__(self, baseCurve, bumps, UseReverseCumulative):
        this = _mcp.new_MPV01_Set(baseCurve, bumps, UseReverseCumulative)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mcp.delete_MPV01_Set
    __del__ = lambda self: None

    def getHandler(self):
        return _mcp.MPV01_Set_getHandler(self)
MPV01_Set_swigregister = _mcp.MPV01_Set_swigregister
MPV01_Set_swigregister(MPV01_Set)

class MCapletFloorlet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MCapletFloorlet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MCapletFloorlet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _mcp.new_MCapletFloorlet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mcp.delete_MCapletFloorlet
    __del__ = lambda self: None

    def Price(self):
        return _mcp.MCapletFloorlet_Price(self)

    def SpotDelta(self):
        return _mcp.MCapletFloorlet_SpotDelta(self)

    def FwdDelta(self):
        return _mcp.MCapletFloorlet_FwdDelta(self)

    def SpotVega(self):
        return _mcp.MCapletFloorlet_SpotVega(self)

    def FwdVega(self):
        return _mcp.MCapletFloorlet_FwdVega(self)

    def SpotGamma(self):
        return _mcp.MCapletFloorlet_SpotGamma(self)

    def FwdGamma(self):
        return _mcp.MCapletFloorlet_FwdGamma(self)

    def ValueDate(self):
        return _mcp.MCapletFloorlet_ValueDate(self)

    def ExpiryDate(self):
        return _mcp.MCapletFloorlet_ExpiryDate(self)

    def MaturityDate(self):
        return _mcp.MCapletFloorlet_MaturityDate(self)

    def FixingDate(self):
        return _mcp.MCapletFloorlet_FixingDate(self)

    def CalcStartDate(self):
        return _mcp.MCapletFloorlet_CalcStartDate(self)

    def CalcEndDate(self):
        return _mcp.MCapletFloorlet_CalcEndDate(self)

    def RateStartDate(self):
        return _mcp.MCapletFloorlet_RateStartDate(self)

    def RateEndDate(self):
        return _mcp.MCapletFloorlet_RateEndDate(self)

    def PaymentDate(self):
        return _mcp.MCapletFloorlet_PaymentDate(self)

    def getHandler(self):
        return _mcp.MCapletFloorlet_getHandler(self)
MCapletFloorlet_swigregister = _mcp.MCapletFloorlet_swigregister
MCapletFloorlet_swigregister(MCapletFloorlet)

class MCapFloor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MCapFloor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MCapFloor, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _mcp.new_MCapFloor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mcp.delete_MCapFloor
    __del__ = lambda self: None

    def Price(self):
        return _mcp.MCapFloor_Price(self)

    def SpotDelta(self):
        return _mcp.MCapFloor_SpotDelta(self)

    def FwdDelta(self):
        return _mcp.MCapFloor_FwdDelta(self)

    def SpotVega(self):
        return _mcp.MCapFloor_SpotVega(self)

    def FwdVega(self):
        return _mcp.MCapFloor_FwdVega(self)

    def SpotGamma(self):
        return _mcp.MCapFloor_SpotGamma(self)

    def FwdGamma(self):
        return _mcp.MCapFloor_FwdGamma(self)

    def GetNumCaplets(self):
        return _mcp.MCapFloor_GetNumCaplets(self)

    def GetCaplet(self, idx):
        return _mcp.MCapFloor_GetCaplet(self, idx)

    def ExpiryDates(self):
        return _mcp.MCapFloor_ExpiryDates(self)

    def MaturityDates(self):
        return _mcp.MCapFloor_MaturityDates(self)

    def getHandler(self):
        return _mcp.MCapFloor_getHandler(self)
MCapFloor_swigregister = _mcp.MCapFloor_swigregister
MCapFloor_swigregister(MCapFloor)

class MBlack76Swaption(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MBlack76Swaption, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MBlack76Swaption, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _mcp.new_MBlack76Swaption(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mcp.delete_MBlack76Swaption
    __del__ = lambda self: None

    def Price(self):
        return _mcp.MBlack76Swaption_Price(self)

    def DV01(self):
        return _mcp.MBlack76Swaption_DV01(self)

    def PV01(self):
        return _mcp.MBlack76Swaption_PV01(self)

    def Vomma(self):
        return _mcp.MBlack76Swaption_Vomma(self)

    def Delta(self):
        return _mcp.MBlack76Swaption_Delta(self)

    def Gamma(self):
        return _mcp.MBlack76Swaption_Gamma(self)

    def Vega(self):
        return _mcp.MBlack76Swaption_Vega(self)

    def Vanna(self):
        return _mcp.MBlack76Swaption_Vanna(self)

    def Theta(self):
        return _mcp.MBlack76Swaption_Theta(self)

    def NPV(self):
        return _mcp.MBlack76Swaption_NPV(self)
MBlack76Swaption_swigregister = _mcp.MBlack76Swaption_swigregister
MBlack76Swaption_swigregister(MBlack76Swaption)

class MHistVols(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MHistVols, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MHistVols, name)
    __repr__ = _swig_repr

    def __init__(self, label, referenceDate, dates, quotes, periods, model, returnMethod, annualFactor, lamda, interpolationMethod, dayCounter):
        this = _mcp.new_MHistVols(label, referenceDate, dates, quotes, periods, model, returnMethod, annualFactor, lamda, interpolationMethod, dayCounter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mcp.delete_MHistVols
    __del__ = lambda self: None

    def GetVol(self, referenceDate, sampleNum=0):
        return _mcp.MHistVols_GetVol(self, referenceDate, sampleNum)

    def GetName(self):
        return _mcp.MHistVols_GetName(self)

    def toString(self):
        return _mcp.MHistVols_toString(self)

    def GetVols(self, referenceDates):
        return _mcp.MHistVols_GetVols(self, referenceDates)

    def GetVolMap(self):
        return _mcp.MHistVols_GetVolMap(self)
MHistVols_swigregister = _mcp.MHistVols_swigregister
MHistVols_swigregister(MHistVols)

class VectorWrapper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorWrapper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorWrapper, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _mcp.new_VectorWrapper()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mcp.delete_VectorWrapper
    __del__ = lambda self: None

    def add(self, p):
        return _mcp.VectorWrapper_add(self, p)

    def getHandler(self):
        return _mcp.VectorWrapper_getHandler(self)
VectorWrapper_swigregister = _mcp.VectorWrapper_swigregister
VectorWrapper_swigregister(VectorWrapper)

class MIROHistVols(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MIROHistVols, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MIROHistVols, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _mcp.new_MIROHistVols(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mcp.delete_MIROHistVols
    __del__ = lambda self: None

    def GetVol(self, referenceDate):
        return _mcp.MIROHistVols_GetVol(self, referenceDate)

    def GetVols(self, referenceDates):
        return _mcp.MIROHistVols_GetVols(self, referenceDates)
MIROHistVols_swigregister = _mcp.MIROHistVols_swigregister
MIROHistVols_swigregister(MIROHistVols)

class MBDTData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MBDTData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MBDTData, name)
    __repr__ = _swig_repr

    def __init__(self, dates, rates, vols, rateType, volType):
        this = _mcp.new_MBDTData(dates, rates, vols, rateType, volType)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mcp.delete_MBDTData
    __del__ = lambda self: None

    def getHandler(self):
        return _mcp.MBDTData_getHandler(self)
MBDTData_swigregister = _mcp.MBDTData_swigregister
MBDTData_swigregister(MBDTData)

class MBDTTree(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MBDTTree, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MBDTTree, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _mcp.new_MBDTTree(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mcp.delete_MBDTTree
    __del__ = lambda self: None

    def Price(self):
        return _mcp.MBDTTree_Price(self)

    def OptionPrice(self):
        return _mcp.MBDTTree_OptionPrice(self)

    def OptionFreePrice(self):
        return _mcp.MBDTTree_OptionFreePrice(self)

    def OptionAdjustSpread(self, initialPrice, tolerance, maxNumIterations):
        return _mcp.MBDTTree_OptionAdjustSpread(self, initialPrice, tolerance, maxNumIterations)

    def BinaryTreeDiscountSpread(self, initialPrice, tolerance, maxNumIterations):
        return _mcp.MBDTTree_BinaryTreeDiscountSpread(self, initialPrice, tolerance, maxNumIterations)

    def Duration(self, initialPrice, delta, tolerance, maxNumIterations):
        return _mcp.MBDTTree_Duration(self, initialPrice, delta, tolerance, maxNumIterations)

    def PVBP(self, initialPrice, delta, tolerance, maxNumIterations):
        return _mcp.MBDTTree_PVBP(self, initialPrice, delta, tolerance, maxNumIterations)

    def DV01(self, initialPrice, delta, faceValue, tolerance, maxNumIterations):
        return _mcp.MBDTTree_DV01(self, initialPrice, delta, faceValue, tolerance, maxNumIterations)

    def Convexity(self, marketPrice, delta, tolerance, maxNumIterations):
        return _mcp.MBDTTree_Convexity(self, marketPrice, delta, tolerance, maxNumIterations)
MBDTTree_swigregister = _mcp.MBDTTree_swigregister
MBDTTree_swigregister(MBDTTree)

class MAutoCall(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MAutoCall, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MAutoCall, name)
    __repr__ = _swig_repr

    def __init__(self, valuationDate, expiryDate, observationPrice, buySell, knockInPrice, knockInObservationFrequency, firstknockInObservationDate, knockInLeverage, knockOutPrice, knockOutCoupon, knockOutObservationFrequency, firstknockOutObservationDate, noTouchCoupon, vol, accRate, dividend, payoffModel, faceValue, calendar, dateAdjuster, EndToEnd, LongStub, EndStub, dayCounter, numSimulation):
        this = _mcp.new_MAutoCall(valuationDate, expiryDate, observationPrice, buySell, knockInPrice, knockInObservationFrequency, firstknockInObservationDate, knockInLeverage, knockOutPrice, knockOutCoupon, knockOutObservationFrequency, firstknockOutObservationDate, noTouchCoupon, vol, accRate, dividend, payoffModel, faceValue, calendar, dateAdjuster, EndToEnd, LongStub, EndStub, dayCounter, numSimulation)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mcp.delete_MAutoCall
    __del__ = lambda self: None

    def price(self, mode=-1):
        return _mcp.MAutoCall_price(self, mode)

    def ImpliedKnockInPriceFromPrice(self, price):
        return _mcp.MAutoCall_ImpliedKnockInPriceFromPrice(self, price)

    def Delta(self):
        return _mcp.MAutoCall_Delta(self)

    def Gamma(self):
        return _mcp.MAutoCall_Gamma(self)

    def Theta(self):
        return _mcp.MAutoCall_Theta(self)

    def Vega(self):
        return _mcp.MAutoCall_Vega(self)

    def Rho(self):
        return _mcp.MAutoCall_Rho(self)
MAutoCall_swigregister = _mcp.MAutoCall_swigregister
MAutoCall_swigregister(MAutoCall)

class MSnowBall(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MSnowBall, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MSnowBall, name)
    __repr__ = _swig_repr

    def __init__(self, valuationDate, expiryDate, observationPrice, buySell, knockInPrice, knockInObservationFrequency, firstknockInObservationDate, knockInLeverage, knockOutPrice, knockOutCoupon, knockOutObservationFrequency, firstknockOutObservationDate, noTouchCoupon, vol, accRate, dividend, faceValue, calendar, dateAdjuster, EndToEnd, LongStub, EndStub, dayCounter, numSimulation):
        this = _mcp.new_MSnowBall(valuationDate, expiryDate, observationPrice, buySell, knockInPrice, knockInObservationFrequency, firstknockInObservationDate, knockInLeverage, knockOutPrice, knockOutCoupon, knockOutObservationFrequency, firstknockOutObservationDate, noTouchCoupon, vol, accRate, dividend, faceValue, calendar, dateAdjuster, EndToEnd, LongStub, EndStub, dayCounter, numSimulation)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mcp.delete_MSnowBall
    __del__ = lambda self: None

    def price(self, mode=-1):
        return _mcp.MSnowBall_price(self, mode)

    def ImpliedKnockInPriceFromPrice(self, price):
        return _mcp.MSnowBall_ImpliedKnockInPriceFromPrice(self, price)

    def ImpliedKnockOutPriceFromPrice(self, price):
        return _mcp.MSnowBall_ImpliedKnockOutPriceFromPrice(self, price)

    def ImpliedNoTouchCouponFromPrice(self, price):
        return _mcp.MSnowBall_ImpliedNoTouchCouponFromPrice(self, price)

    def ImpliedKnockOutCouponFromPrice(self, price):
        return _mcp.MSnowBall_ImpliedKnockOutCouponFromPrice(self, price)

    def Delta(self):
        return _mcp.MSnowBall_Delta(self)

    def Gamma(self):
        return _mcp.MSnowBall_Gamma(self)

    def Theta(self):
        return _mcp.MSnowBall_Theta(self)

    def Vega(self):
        return _mcp.MSnowBall_Vega(self)

    def Rho(self):
        return _mcp.MSnowBall_Rho(self)

    def KnockOutObservationSchedule(self):
        return _mcp.MSnowBall_KnockOutObservationSchedule(self)

    def KnockInObservationSchedule(self):
        return _mcp.MSnowBall_KnockInObservationSchedule(self)
MSnowBall_swigregister = _mcp.MSnowBall_swigregister
MSnowBall_swigregister(MSnowBall)

class MPhenix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MPhenix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MPhenix, name)
    __repr__ = _swig_repr

    def __init__(self, valuationDate, expiryDate, observationPrice, buySell, knockInPrice, observationFrequency, firstObservationDate, knockInLeverage, knockOutPrice, contingentCoupon, vol, accRate, dividend, faceValue, calendar, dateAdjuster, EndToEnd, LongStub, EndStub, dayCounter, numSimulation):
        this = _mcp.new_MPhenix(valuationDate, expiryDate, observationPrice, buySell, knockInPrice, observationFrequency, firstObservationDate, knockInLeverage, knockOutPrice, contingentCoupon, vol, accRate, dividend, faceValue, calendar, dateAdjuster, EndToEnd, LongStub, EndStub, dayCounter, numSimulation)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mcp.delete_MPhenix
    __del__ = lambda self: None

    def price(self, mode=-1):
        return _mcp.MPhenix_price(self, mode)

    def ImpliedKnockInPriceFromPrice(self, price):
        return _mcp.MPhenix_ImpliedKnockInPriceFromPrice(self, price)

    def ImpliedKnockOutPriceFromPrice(self, price):
        return _mcp.MPhenix_ImpliedKnockOutPriceFromPrice(self, price)

    def ImpliedContingentCouponFromPrice(self, price):
        return _mcp.MPhenix_ImpliedContingentCouponFromPrice(self, price)

    def Delta(self):
        return _mcp.MPhenix_Delta(self)

    def Gamma(self):
        return _mcp.MPhenix_Gamma(self)

    def Theta(self):
        return _mcp.MPhenix_Theta(self)

    def Vega(self):
        return _mcp.MPhenix_Vega(self)

    def Rho(self):
        return _mcp.MPhenix_Rho(self)

    def ObservationSchedule(self):
        return _mcp.MPhenix_ObservationSchedule(self)
MPhenix_swigregister = _mcp.MPhenix_swigregister
MPhenix_swigregister(MPhenix)

class MBarrierAutoCall(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MBarrierAutoCall, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MBarrierAutoCall, name)
    __repr__ = _swig_repr

    def __init__(self, valuationDate, expiryDate, observationPrice, buySell, knockInPrice, observationFrequency, firstObservationDate, knockOutPrice, fixedCoupon, vol, accRate, dividend, faceValue, calendar, dateAdjuster, EndToEnd, LongStub, EndStub, dayCounter, numSimulation):
        this = _mcp.new_MBarrierAutoCall(valuationDate, expiryDate, observationPrice, buySell, knockInPrice, observationFrequency, firstObservationDate, knockOutPrice, fixedCoupon, vol, accRate, dividend, faceValue, calendar, dateAdjuster, EndToEnd, LongStub, EndStub, dayCounter, numSimulation)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mcp.delete_MBarrierAutoCall
    __del__ = lambda self: None

    def price(self, mode=-1):
        return _mcp.MBarrierAutoCall_price(self, mode)

    def ImpliedKnockInPriceFromPrice(self, price):
        return _mcp.MBarrierAutoCall_ImpliedKnockInPriceFromPrice(self, price)

    def ImpliedKnockOutPriceFromPrice(self, price):
        return _mcp.MBarrierAutoCall_ImpliedKnockOutPriceFromPrice(self, price)

    def ImpliedFixedCouponFromPrice(self, price):
        return _mcp.MBarrierAutoCall_ImpliedFixedCouponFromPrice(self, price)

    def Delta(self):
        return _mcp.MBarrierAutoCall_Delta(self)

    def Gamma(self):
        return _mcp.MBarrierAutoCall_Gamma(self)

    def Theta(self):
        return _mcp.MBarrierAutoCall_Theta(self)

    def Vega(self):
        return _mcp.MBarrierAutoCall_Vega(self)

    def Rho(self):
        return _mcp.MBarrierAutoCall_Rho(self)

    def ObservationSchedule(self):
        return _mcp.MBarrierAutoCall_ObservationSchedule(self)
MBarrierAutoCall_swigregister = _mcp.MBarrierAutoCall_swigregister
MBarrierAutoCall_swigregister(MBarrierAutoCall)

class MTongXinAutoCall(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MTongXinAutoCall, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MTongXinAutoCall, name)
    __repr__ = _swig_repr

    def __init__(self, valuationDate, expiryDate, observationPrice, buySell, knockInPrice, observationFrequency, firstObservationDate, contingentCoupon, vol, accRate, dividend, faceValue, calendar, dateAdjuster, EndToEnd, LongStub, EndStub, dayCounter, numSimulation):
        this = _mcp.new_MTongXinAutoCall(valuationDate, expiryDate, observationPrice, buySell, knockInPrice, observationFrequency, firstObservationDate, contingentCoupon, vol, accRate, dividend, faceValue, calendar, dateAdjuster, EndToEnd, LongStub, EndStub, dayCounter, numSimulation)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mcp.delete_MTongXinAutoCall
    __del__ = lambda self: None

    def price(self, mode=-1):
        return _mcp.MTongXinAutoCall_price(self, mode)

    def ImpliedKnockInPriceFromPrice(self, price):
        return _mcp.MTongXinAutoCall_ImpliedKnockInPriceFromPrice(self, price)

    def ImpliedContingentCouponFromPrice(self, price):
        return _mcp.MTongXinAutoCall_ImpliedContingentCouponFromPrice(self, price)

    def Delta(self):
        return _mcp.MTongXinAutoCall_Delta(self)

    def Gamma(self):
        return _mcp.MTongXinAutoCall_Gamma(self)

    def Theta(self):
        return _mcp.MTongXinAutoCall_Theta(self)

    def Vega(self):
        return _mcp.MTongXinAutoCall_Vega(self)

    def Rho(self):
        return _mcp.MTongXinAutoCall_Rho(self)

    def ObservationSchedule(self):
        return _mcp.MTongXinAutoCall_ObservationSchedule(self)
MTongXinAutoCall_swigregister = _mcp.MTongXinAutoCall_swigregister
MTongXinAutoCall_swigregister(MTongXinAutoCall)

class MDoubleRanges(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDoubleRanges, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDoubleRanges, name)
    __repr__ = _swig_repr

    def __init__(self, valuationDate, expiryDate, observationPrice, buySell, upperKnockInPrice, lowerKnockInPrice, noTouchCoupon, knockInCoupon, vol, accRate, dividend, faceValue, calendar, dateAdjuster, EndToEnd, LongStub, EndStub, dayCounter, numSimulation):
        this = _mcp.new_MDoubleRanges(valuationDate, expiryDate, observationPrice, buySell, upperKnockInPrice, lowerKnockInPrice, noTouchCoupon, knockInCoupon, vol, accRate, dividend, faceValue, calendar, dateAdjuster, EndToEnd, LongStub, EndStub, dayCounter, numSimulation)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mcp.delete_MDoubleRanges
    __del__ = lambda self: None

    def price(self, mode=-1):
        return _mcp.MDoubleRanges_price(self, mode)

    def ImpliedKnockInPriceFromPrice(self, price):
        return _mcp.MDoubleRanges_ImpliedKnockInPriceFromPrice(self, price)

    def ImpliedLowerKnockInPriceFromPrice(self, price):
        return _mcp.MDoubleRanges_ImpliedLowerKnockInPriceFromPrice(self, price)

    def ImpliedNoTouchCouponFromPrice(self, price):
        return _mcp.MDoubleRanges_ImpliedNoTouchCouponFromPrice(self, price)

    def Delta(self):
        return _mcp.MDoubleRanges_Delta(self)

    def Gamma(self):
        return _mcp.MDoubleRanges_Gamma(self)

    def Theta(self):
        return _mcp.MDoubleRanges_Theta(self)

    def Vega(self):
        return _mcp.MDoubleRanges_Vega(self)

    def Rho(self):
        return _mcp.MDoubleRanges_Rho(self)
MDoubleRanges_swigregister = _mcp.MDoubleRanges_swigregister
MDoubleRanges_swigregister(MDoubleRanges)

class MTrippleRanges(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MTrippleRanges, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MTrippleRanges, name)
    __repr__ = _swig_repr

    def __init__(self, valuationDate, expiryDate, observationPrice, buySell, upperKnockInPrice, lowerKnockInPrice, noTouchCoupon, upperKnockInCoupon, lowerKnockInCoupon, vol, accRate, dividend, faceValue, calendar, dateAdjuster, EndToEnd, LongStub, EndStub, dayCounter, numSimulation):
        this = _mcp.new_MTrippleRanges(valuationDate, expiryDate, observationPrice, buySell, upperKnockInPrice, lowerKnockInPrice, noTouchCoupon, upperKnockInCoupon, lowerKnockInCoupon, vol, accRate, dividend, faceValue, calendar, dateAdjuster, EndToEnd, LongStub, EndStub, dayCounter, numSimulation)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mcp.delete_MTrippleRanges
    __del__ = lambda self: None

    def price(self, mode=-1):
        return _mcp.MTrippleRanges_price(self, mode)

    def ImpliedUpperKnockInPriceFromPrice(self, price):
        return _mcp.MTrippleRanges_ImpliedUpperKnockInPriceFromPrice(self, price)

    def ImpliedLowerKnockInPriceFromPrice(self, price):
        return _mcp.MTrippleRanges_ImpliedLowerKnockInPriceFromPrice(self, price)

    def ImpliedNoTouchCouponFromPrice(self, price):
        return _mcp.MTrippleRanges_ImpliedNoTouchCouponFromPrice(self, price)

    def Delta(self):
        return _mcp.MTrippleRanges_Delta(self)

    def Gamma(self):
        return _mcp.MTrippleRanges_Gamma(self)

    def Theta(self):
        return _mcp.MTrippleRanges_Theta(self)

    def Vega(self):
        return _mcp.MTrippleRanges_Vega(self)

    def Rho(self):
        return _mcp.MTrippleRanges_Rho(self)
MTrippleRanges_swigregister = _mcp.MTrippleRanges_swigregister
MTrippleRanges_swigregister(MTrippleRanges)

class MFXForwardOutright(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MFXForwardOutright, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MFXForwardOutright, name)
    __repr__ = _swig_repr

    def __init__(self, referenceDate, spotDate, endDate, forwardOutright, notional, baseCcy, termCcy):
        this = _mcp.new_MFXForwardOutright(referenceDate, spotDate, endDate, forwardOutright, notional, baseCcy, termCcy)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mcp.delete_MFXForwardOutright
    __del__ = lambda self: None

    def Price(self, estimationCurve1, discountingCurve1, estimationCurve2, discountingCurve2, fx):
        return _mcp.MFXForwardOutright_Price(self, estimationCurve1, discountingCurve1, estimationCurve2, discountingCurve2, fx)

    def NPV(self, estimationCurve1, discountingCurve1, estimationCurve2, discountingCurve2, fx):
        return _mcp.MFXForwardOutright_NPV(self, estimationCurve1, discountingCurve1, estimationCurve2, discountingCurve2, fx)

    def FrtbGirrDeltas(self, estimationCurve1, discountingCurve1, estimationCurve2, discountingCurve2, fxSpot, ccy2LocRate):
        return _mcp.MFXForwardOutright_FrtbGirrDeltas(self, estimationCurve1, discountingCurve1, estimationCurve2, discountingCurve2, fxSpot, ccy2LocRate)

    def FrtbFxDelta(self, ccyLocMarketSpot, isLocCcy2=True, ccy2LocRate=1.0):
        return _mcp.MFXForwardOutright_FrtbFxDelta(self, ccyLocMarketSpot, isLocCcy2, ccy2LocRate)

    def FrtbFxDeltas(self, ccy1LocMarketSpot, ccy2LocMarketSpot, ccy2LocRate=1.0):
        return _mcp.MFXForwardOutright_FrtbFxDeltas(self, ccy1LocMarketSpot, ccy2LocMarketSpot, ccy2LocRate)
MFXForwardOutright_swigregister = _mcp.MFXForwardOutright_swigregister
MFXForwardOutright_swigregister(MFXForwardOutright)

class MFXForwardPointsCurve(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MFXForwardPointsCurve, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MFXForwardPointsCurve, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _mcp.new_MFXForwardPointsCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mcp.delete_MFXForwardPointsCurve
    __del__ = lambda self: None

    def FXForwardPoints(self, endDate):
        return _mcp.MFXForwardPointsCurve_FXForwardPoints(self, endDate)

    def FXForwardOutright(self, endDate):
        return _mcp.MFXForwardPointsCurve_FXForwardOutright(self, endDate)

    def TOForwardPoint(self, startDate, endDate, findMax=False):
        return _mcp.MFXForwardPointsCurve_TOForwardPoint(self, startDate, endDate, findMax)

    def TOForwardOutright(self, startDate, endDate, findMax=False):
        return _mcp.MFXForwardPointsCurve_TOForwardOutright(self, startDate, endDate, findMax)

    def TimeOptionDate(self, startDate, endDate, findMax=False):
        return _mcp.MFXForwardPointsCurve_TimeOptionDate(self, startDate, endDate, findMax)
    if _newclass:
        Forward2ImpliedBaseRate = staticmethod(_mcp.MFXForwardPointsCurve_Forward2ImpliedBaseRate)
    else:
        Forward2ImpliedBaseRate = _mcp.MFXForwardPointsCurve_Forward2ImpliedBaseRate
    if _newclass:
        Forward2ImpliedTermRate = staticmethod(_mcp.MFXForwardPointsCurve_Forward2ImpliedTermRate)
    else:
        Forward2ImpliedTermRate = _mcp.MFXForwardPointsCurve_Forward2ImpliedTermRate
    if _newclass:
        ImpliedForward = staticmethod(_mcp.MFXForwardPointsCurve_ImpliedForward)
    else:
        ImpliedForward = _mcp.MFXForwardPointsCurve_ImpliedForward
    if _newclass:
        ImpliedFwdPoints = staticmethod(_mcp.MFXForwardPointsCurve_ImpliedFwdPoints)
    else:
        ImpliedFwdPoints = _mcp.MFXForwardPointsCurve_ImpliedFwdPoints

    def GetReferenceDate(self):
        return _mcp.MFXForwardPointsCurve_GetReferenceDate(self)

    def getHandler(self):
        return _mcp.MFXForwardPointsCurve_getHandler(self)
MFXForwardPointsCurve_swigregister = _mcp.MFXForwardPointsCurve_swigregister
MFXForwardPointsCurve_swigregister(MFXForwardPointsCurve)

def MFXForwardPointsCurve_Forward2ImpliedBaseRate(pair, forward, spot, termRate, spotDate, deliveryDate):
    return _mcp.MFXForwardPointsCurve_Forward2ImpliedBaseRate(pair, forward, spot, termRate, spotDate, deliveryDate)
MFXForwardPointsCurve_Forward2ImpliedBaseRate = _mcp.MFXForwardPointsCurve_Forward2ImpliedBaseRate

def MFXForwardPointsCurve_Forward2ImpliedTermRate(pair, forward, spot, baseRate, spotDate, deliveryDate):
    return _mcp.MFXForwardPointsCurve_Forward2ImpliedTermRate(pair, forward, spot, baseRate, spotDate, deliveryDate)
MFXForwardPointsCurve_Forward2ImpliedTermRate = _mcp.MFXForwardPointsCurve_Forward2ImpliedTermRate

def MFXForwardPointsCurve_ImpliedForward(pair, baseRate, termRate, spot, spotDate, deliveryDate):
    return _mcp.MFXForwardPointsCurve_ImpliedForward(pair, baseRate, termRate, spot, spotDate, deliveryDate)
MFXForwardPointsCurve_ImpliedForward = _mcp.MFXForwardPointsCurve_ImpliedForward

def MFXForwardPointsCurve_ImpliedFwdPoints(pair, baseRate, termRate, spot, spotDate, deliveryDate):
    return _mcp.MFXForwardPointsCurve_ImpliedFwdPoints(pair, baseRate, termRate, spot, spotDate, deliveryDate)
MFXForwardPointsCurve_ImpliedFwdPoints = _mcp.MFXForwardPointsCurve_ImpliedFwdPoints

class MMktVolSurface(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MMktVolSurface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MMktVolSurface, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _mcp.delete_MMktVolSurface
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _mcp.new_MMktVolSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetVolatility(self, *args):
        return _mcp.MMktVolSurface_GetVolatility(self, *args)

    def GetStrike(self, deltaString, tenor):
        return _mcp.MMktVolSurface_GetStrike(self, deltaString, tenor)

    def GetForward(self, expiryOrDeliveryDate, isDeliveryDate=False, isDirect=False):
        return _mcp.MMktVolSurface_GetForward(self, expiryOrDeliveryDate, isDeliveryDate, isDirect)

    def GetForwardPoint(self, expiryOrDeliveryDate, isDeliveryDate=False, isDirect=False):
        return _mcp.MMktVolSurface_GetForwardPoint(self, expiryOrDeliveryDate, isDeliveryDate, isDirect)

    def GetForeignRate(self, expiryOrDeliveryDate, isDeliveryDate=False, isDirect=False):
        return _mcp.MMktVolSurface_GetForeignRate(self, expiryOrDeliveryDate, isDeliveryDate, isDirect)

    def GetDomesticRate(self, expiryOrDeliveryDate, isDeliveryDate=False, isDirect=False):
        return _mcp.MMktVolSurface_GetDomesticRate(self, expiryOrDeliveryDate, isDeliveryDate, isDirect)

    def GetATMVol(self, expiryDate):
        return _mcp.MMktVolSurface_GetATMVol(self, expiryDate)

    def GetSpot(self):
        return _mcp.MMktVolSurface_GetSpot(self)

    def GetReferenceDate(self):
        return _mcp.MMktVolSurface_GetReferenceDate(self)

    def GetSpotDate(self):
        return _mcp.MMktVolSurface_GetSpotDate(self)

    def GetParams(self, expiryDate):
        return _mcp.MMktVolSurface_GetParams(self, expiryDate)

    def SVIFormula(self, K, f, T, alpha, beta, rho, m, sig):
        return _mcp.MMktVolSurface_SVIFormula(self, K, f, T, alpha, beta, rho, m, sig)

    def SABRFormula(self, K, f, T, alpha, rho, nu, beta):
        return _mcp.MMktVolSurface_SABRFormula(self, K, f, T, alpha, rho, nu, beta)

    def Dispose(self):
        return _mcp.MMktVolSurface_Dispose(self)

    def getHandler(self):
        return _mcp.MMktVolSurface_getHandler(self)
MMktVolSurface_swigregister = _mcp.MMktVolSurface_swigregister
MMktVolSurface_swigregister(MMktVolSurface)

class MFXVolSurface(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MFXVolSurface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MFXVolSurface, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _mcp.delete_MFXVolSurface
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _mcp.new_MFXVolSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetVolatility(self, *args):
        return _mcp.MFXVolSurface_GetVolatility(self, *args)

    def GetStrike(self, *args):
        return _mcp.MFXVolSurface_GetStrike(self, *args)

    def GetForward(self, expiryOrDeliveryDate, isDeliveryDate=False, isDirect=False):
        return _mcp.MFXVolSurface_GetForward(self, expiryOrDeliveryDate, isDeliveryDate, isDirect)

    def GetForwardPoint(self, expiryOrDeliveryDate, isDeliveryDate=False, isDirect=False):
        return _mcp.MFXVolSurface_GetForwardPoint(self, expiryOrDeliveryDate, isDeliveryDate, isDirect)

    def GetForeignRate(self, expiryOrDeliveryDate, isDeliveryDate=False, isDirect=False):
        return _mcp.MFXVolSurface_GetForeignRate(self, expiryOrDeliveryDate, isDeliveryDate, isDirect)

    def GetDomesticRate(self, expiryOrDeliveryDate, isDeliveryDate=False, isDirect=False):
        return _mcp.MFXVolSurface_GetDomesticRate(self, expiryOrDeliveryDate, isDeliveryDate, isDirect)

    def GetCurveForward(self, expiryOrDeliveryDate, isDeliveryDate=False):
        return _mcp.MFXVolSurface_GetCurveForward(self, expiryOrDeliveryDate, isDeliveryDate)

    def GetCurveForwardPoint(self, expiryOrDeliveryDate, isDeliveryDate):
        return _mcp.MFXVolSurface_GetCurveForwardPoint(self, expiryOrDeliveryDate, isDeliveryDate)

    def GetCurveForeignRate(self, expiryOrDeliveryDate, isDeliveryDate=False):
        return _mcp.MFXVolSurface_GetCurveForeignRate(self, expiryOrDeliveryDate, isDeliveryDate)

    def GetCurveDomesticRate(self, expiryOrDeliveryDate, isDeliveryDate=False):
        return _mcp.MFXVolSurface_GetCurveDomesticRate(self, expiryOrDeliveryDate, isDeliveryDate)

    def GetATMVol(self, expiryDate):
        return _mcp.MFXVolSurface_GetATMVol(self, expiryDate)

    def GetSpot(self):
        return _mcp.MFXVolSurface_GetSpot(self)

    def GetReferenceDate(self):
        return _mcp.MFXVolSurface_GetReferenceDate(self)

    def GetSpotDate(self):
        return _mcp.MFXVolSurface_GetSpotDate(self)

    def GetParams(self, expiryDate):
        return _mcp.MFXVolSurface_GetParams(self, expiryDate)

    def SVIFormula(self, K, f, T, alpha, beta, rho, m, sig):
        return _mcp.MFXVolSurface_SVIFormula(self, K, f, T, alpha, beta, rho, m, sig)

    def SABRFormula(self, K, f, T, alpha, rho, nu, beta):
        return _mcp.MFXVolSurface_SABRFormula(self, K, f, T, alpha, rho, nu, beta)

    def Dispose(self):
        return _mcp.MFXVolSurface_Dispose(self)

    def getHandler(self):
        return _mcp.MFXVolSurface_getHandler(self)
MFXVolSurface_swigregister = _mcp.MFXVolSurface_swigregister
MFXVolSurface_swigregister(MFXVolSurface)

class MFXForwardPointsCurve2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MFXForwardPointsCurve2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MFXForwardPointsCurve2, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _mcp.new_MFXForwardPointsCurve2(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mcp.delete_MFXForwardPointsCurve2
    __del__ = lambda self: None

    def FXForwardPoints(self, *args):
        return _mcp.MFXForwardPointsCurve2_FXForwardPoints(self, *args)

    def FXForwardOutright(self, *args):
        return _mcp.MFXForwardPointsCurve2_FXForwardOutright(self, *args)

    def FXSpotRate(self, *args):
        return _mcp.MFXForwardPointsCurve2_FXSpotRate(self, *args)

    def TOForwardPoint(self, *args):
        return _mcp.MFXForwardPointsCurve2_TOForwardPoint(self, *args)

    def TOForwardOutright(self, *args):
        return _mcp.MFXForwardPointsCurve2_TOForwardOutright(self, *args)

    def TimeOptionDate(self, *args):
        return _mcp.MFXForwardPointsCurve2_TimeOptionDate(self, *args)

    def GetCurve(self, *args):
        return _mcp.MFXForwardPointsCurve2_GetCurve(self, *args)

    def SpotDate(self):
        return _mcp.MFXForwardPointsCurve2_SpotDate(self)

    def ScaleFactor(self, *args):
        return _mcp.MFXForwardPointsCurve2_ScaleFactor(self, *args)

    def GetReferenceDate(self):
        return _mcp.MFXForwardPointsCurve2_GetReferenceDate(self)

    def getHandler(self):
        return _mcp.MFXForwardPointsCurve2_getHandler(self)
MFXForwardPointsCurve2_swigregister = _mcp.MFXForwardPointsCurve2_swigregister
MFXForwardPointsCurve2_swigregister(MFXForwardPointsCurve2)

class MYieldCurve2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MYieldCurve2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MYieldCurve2, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _mcp.new_MYieldCurve2(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def DiscountFactor(self, *args):
        return _mcp.MYieldCurve2_DiscountFactor(self, *args)

    def ZeroRate(self, *args):
        return _mcp.MYieldCurve2_ZeroRate(self, *args)

    def GetCurve(self, BidMidAsk):
        return _mcp.MYieldCurve2_GetCurve(self, BidMidAsk)

    def GetReferenceDate(self):
        return _mcp.MYieldCurve2_GetReferenceDate(self)

    def getHandler(self):
        return _mcp.MYieldCurve2_getHandler(self)
    __swig_destroy__ = _mcp.delete_MYieldCurve2
    __del__ = lambda self: None

    def Dispose(self):
        return _mcp.MYieldCurve2_Dispose(self)
MYieldCurve2_swigregister = _mcp.MYieldCurve2_swigregister
MYieldCurve2_swigregister(MYieldCurve2)

class MMktVolSurface2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MMktVolSurface2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MMktVolSurface2, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _mcp.delete_MMktVolSurface2
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _mcp.new_MMktVolSurface2(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetVolatility(self, *args):
        return _mcp.MMktVolSurface2_GetVolatility(self, *args)

    def GetVolatilities(self, *args):
        return _mcp.MMktVolSurface2_GetVolatilities(self, *args)

    def GetDeltaStrings(self):
        return _mcp.MMktVolSurface2_GetDeltaStrings(self)

    def GetTenors(self):
        return _mcp.MMktVolSurface2_GetTenors(self)

    def GetStrike(self, *args):
        return _mcp.MMktVolSurface2_GetStrike(self, *args)

    def GetForward(self, *args):
        return _mcp.MMktVolSurface2_GetForward(self, *args)

    def GetForwardPoint(self, *args):
        return _mcp.MMktVolSurface2_GetForwardPoint(self, *args)

    def GetForeignRate(self, *args):
        return _mcp.MMktVolSurface2_GetForeignRate(self, *args)

    def GetDomesticRate(self, *args):
        return _mcp.MMktVolSurface2_GetDomesticRate(self, *args)

    def GetATMVol(self, *args):
        return _mcp.MMktVolSurface2_GetATMVol(self, *args)

    def GetSpot(self, *args):
        return _mcp.MMktVolSurface2_GetSpot(self, *args)

    def GetReferenceDate(self):
        return _mcp.MMktVolSurface2_GetReferenceDate(self)

    def GetSpotDate(self):
        return _mcp.MMktVolSurface2_GetSpotDate(self)

    def GetParams(self, *args):
        return _mcp.MMktVolSurface2_GetParams(self, *args)

    def ForwardPointsCurve(self, BidMidAsk):
        return _mcp.MMktVolSurface2_ForwardPointsCurve(self, BidMidAsk)

    def GetForeignRateCurve2(self):
        return _mcp.MMktVolSurface2_GetForeignRateCurve2(self)

    def GetDomesticRateCurve2(self):
        return _mcp.MMktVolSurface2_GetDomesticRateCurve2(self)

    def GetFXForwardPointsCurve2(self):
        return _mcp.MMktVolSurface2_GetFXForwardPointsCurve2(self)

    def GetUndCurve2(self):
        return _mcp.MMktVolSurface2_GetUndCurve2(self)

    def GetAccRateCurve2(self):
        return _mcp.MMktVolSurface2_GetAccRateCurve2(self)

    def StrikeFromString(self, strikeString, BidMidAsk, callPutType, expiryDate, spot=0.0, forward=0.0):
        return _mcp.MMktVolSurface2_StrikeFromString(self, strikeString, BidMidAsk, callPutType, expiryDate, spot, forward)

    def DeltaStringFromStrike(self, strike, callPutType, useFwd, fxRate):
        return _mcp.MMktVolSurface2_DeltaStringFromStrike(self, strike, callPutType, useFwd, fxRate)

    def getHandler(self):
        return _mcp.MMktVolSurface2_getHandler(self)
MMktVolSurface2_swigregister = _mcp.MMktVolSurface2_swigregister
MMktVolSurface2_swigregister(MMktVolSurface2)

class MFXVolSurface2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MFXVolSurface2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MFXVolSurface2, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _mcp.delete_MFXVolSurface2
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _mcp.new_MFXVolSurface2(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetVolatility(self, *args):
        return _mcp.MFXVolSurface2_GetVolatility(self, *args)

    def GetVolatilities(self, *args):
        return _mcp.MFXVolSurface2_GetVolatilities(self, *args)

    def GetDeltaStrings(self):
        return _mcp.MFXVolSurface2_GetDeltaStrings(self)

    def GetTenors(self):
        return _mcp.MFXVolSurface2_GetTenors(self)

    def GetStrike(self, *args):
        return _mcp.MFXVolSurface2_GetStrike(self, *args)

    def GetForward(self, *args):
        return _mcp.MFXVolSurface2_GetForward(self, *args)

    def GetForwardPoint(self, *args):
        return _mcp.MFXVolSurface2_GetForwardPoint(self, *args)

    def GetForeignRate(self, *args):
        return _mcp.MFXVolSurface2_GetForeignRate(self, *args)

    def GetDomesticRate(self, *args):
        return _mcp.MFXVolSurface2_GetDomesticRate(self, *args)

    def GetATMVol(self, *args):
        return _mcp.MFXVolSurface2_GetATMVol(self, *args)

    def GetSpot(self, *args):
        return _mcp.MFXVolSurface2_GetSpot(self, *args)

    def GetReferenceDate(self):
        return _mcp.MFXVolSurface2_GetReferenceDate(self)

    def GetSpotDate(self):
        return _mcp.MFXVolSurface2_GetSpotDate(self)

    def GetParams(self, *args):
        return _mcp.MFXVolSurface2_GetParams(self, *args)

    def ForwardPointsCurve(self, BidMidAsk):
        return _mcp.MFXVolSurface2_ForwardPointsCurve(self, BidMidAsk)

    def GetForeignRateCurve2(self):
        return _mcp.MFXVolSurface2_GetForeignRateCurve2(self)

    def GetDomesticRateCurve2(self):
        return _mcp.MFXVolSurface2_GetDomesticRateCurve2(self)

    def GetFXForwardPointsCurve2(self):
        return _mcp.MFXVolSurface2_GetFXForwardPointsCurve2(self)

    def GetUndCurve2(self):
        return _mcp.MFXVolSurface2_GetUndCurve2(self)

    def GetAccRateCurve2(self):
        return _mcp.MFXVolSurface2_GetAccRateCurve2(self)

    def GetFXVolSurface(self, BidMidAsk):
        return _mcp.MFXVolSurface2_GetFXVolSurface(self, BidMidAsk)

    def StrikeFromString(self, strikeString, BidMidAsk, callPutType, expiryDate, spot=0.0, forward=0.0):
        return _mcp.MFXVolSurface2_StrikeFromString(self, strikeString, BidMidAsk, callPutType, expiryDate, spot, forward)

    def DeltaStringFromStrike(self, strike, callPutType, useFwd, fxRate):
        return _mcp.MFXVolSurface2_DeltaStringFromStrike(self, strike, callPutType, useFwd, fxRate)

    def getHandler(self):
        return _mcp.MFXVolSurface2_getHandler(self)
MFXVolSurface2_swigregister = _mcp.MFXVolSurface2_swigregister
MFXVolSurface2_swigregister(MFXVolSurface2)

class MVolSurface(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MVolSurface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MVolSurface, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _mcp.delete_MVolSurface
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _mcp.new_MVolSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetVolatility(self, strike, maturityDate, forward=0.0):
        return _mcp.MVolSurface_GetVolatility(self, strike, maturityDate, forward)

    def StrikeFromString(self, strikeString, callPutType, expiryDate, spot=0.0, forward=0.0):
        return _mcp.MVolSurface_StrikeFromString(self, strikeString, callPutType, expiryDate, spot, forward)

    def DeltaStringFromStrike(self, strike, callPutType, underlyingRate):
        return _mcp.MVolSurface_DeltaStringFromStrike(self, strike, callPutType, underlyingRate)

    def GetForward(self, expiryOrDeliveryDate, isDeliveryDate):
        return _mcp.MVolSurface_GetForward(self, expiryOrDeliveryDate, isDeliveryDate)

    def GetRiskFreeRate(self, expiryOrDeliveryDate, isDeliveryDate):
        return _mcp.MVolSurface_GetRiskFreeRate(self, expiryOrDeliveryDate, isDeliveryDate)

    def GetReferenceDate(self):
        return _mcp.MVolSurface_GetReferenceDate(self)

    def GetSpotDate(self):
        return _mcp.MVolSurface_GetSpotDate(self)

    def GetSpot(self):
        return _mcp.MVolSurface_GetSpot(self)

    def GetDividend(self):
        return _mcp.MVolSurface_GetDividend(self)

    def ExpiryDates(self):
        return _mcp.MVolSurface_ExpiryDates(self)

    def ExpiryTimes(self):
        return _mcp.MVolSurface_ExpiryTimes(self)

    def Strikes(self):
        return _mcp.MVolSurface_Strikes(self)

    def GetForwards(self):
        return _mcp.MVolSurface_GetForwards(self)

    def Volatilities(self, *args):
        return _mcp.MVolSurface_Volatilities(self, *args)

    def Dispose(self):
        return _mcp.MVolSurface_Dispose(self)

    def getHandler(self):
        return _mcp.MVolSurface_getHandler(self)
MVolSurface_swigregister = _mcp.MVolSurface_swigregister
MVolSurface_swigregister(MVolSurface)

class MVolSurface2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MVolSurface2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MVolSurface2, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _mcp.delete_MVolSurface2
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _mcp.new_MVolSurface2(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetVolatility(self, *args):
        return _mcp.MVolSurface2_GetVolatility(self, *args)

    def StrikeFromString(self, strikeString, bidMidAsk, callPutType, expiryDate, spot=0.0, forward=0.0):
        return _mcp.MVolSurface2_StrikeFromString(self, strikeString, bidMidAsk, callPutType, expiryDate, spot, forward)

    def DeltaStringFromStrike(self, strike, callPutType, underlyingRate):
        return _mcp.MVolSurface2_DeltaStringFromStrike(self, strike, callPutType, underlyingRate)

    def GetForward(self, expiryOrDeliveryDate, isDeliveryDate, bidMidAsk):
        return _mcp.MVolSurface2_GetForward(self, expiryOrDeliveryDate, isDeliveryDate, bidMidAsk)

    def GetRiskFreeRate(self, expiryOrDeliveryDate, isDeliveryDate, bidMidAsk):
        return _mcp.MVolSurface2_GetRiskFreeRate(self, expiryOrDeliveryDate, isDeliveryDate, bidMidAsk)

    def GetReferenceDate(self):
        return _mcp.MVolSurface2_GetReferenceDate(self)

    def GetSpotDate(self):
        return _mcp.MVolSurface2_GetSpotDate(self)

    def GetSpot(self, bidMidAsk):
        return _mcp.MVolSurface2_GetSpot(self, bidMidAsk)

    def GetDividend(self):
        return _mcp.MVolSurface2_GetDividend(self)

    def ExpiryDates(self, bidMidAsk):
        return _mcp.MVolSurface2_ExpiryDates(self, bidMidAsk)

    def ExpiryTimes(self, bidMidAsk):
        return _mcp.MVolSurface2_ExpiryTimes(self, bidMidAsk)

    def Strikes(self, bidMidAsk):
        return _mcp.MVolSurface2_Strikes(self, bidMidAsk)

    def Volatilities(self, bidMidAsk):
        return _mcp.MVolSurface2_Volatilities(self, bidMidAsk)

    def GetForwards(self, bidMidAsk):
        return _mcp.MVolSurface2_GetForwards(self, bidMidAsk)

    def getHandler(self):
        return _mcp.MVolSurface2_getHandler(self)
MVolSurface2_swigregister = _mcp.MVolSurface2_swigregister
MVolSurface2_swigregister(MVolSurface2)

class MForwardCurve(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MForwardCurve, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MForwardCurve, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _mcp.new_MForwardCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mcp.delete_MForwardCurve
    __del__ = lambda self: None

    def ForwardRate(self, endDate):
        return _mcp.MForwardCurve_ForwardRate(self, endDate)

    def size(self):
        return _mcp.MForwardCurve_size(self)

    def getHandler(self):
        return _mcp.MForwardCurve_getHandler(self)
MForwardCurve_swigregister = _mcp.MForwardCurve_swigregister
MForwardCurve_swigregister(MForwardCurve)

class MForwardCurve2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MForwardCurve2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MForwardCurve2, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _mcp.new_MForwardCurve2(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mcp.delete_MForwardCurve2
    __del__ = lambda self: None

    def GetCurve(self, bidMidAsk):
        return _mcp.MForwardCurve2_GetCurve(self, bidMidAsk)

    def ForwardRate(self, endDate, bidMidAsk):
        return _mcp.MForwardCurve2_ForwardRate(self, endDate, bidMidAsk)

    def size(self):
        return _mcp.MForwardCurve2_size(self)

    def getHandler(self):
        return _mcp.MForwardCurve2_getHandler(self)
MForwardCurve2_swigregister = _mcp.MForwardCurve2_swigregister
MForwardCurve2_swigregister(MForwardCurve2)

class MSingleCumulative(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MSingleCumulative, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MSingleCumulative, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _mcp.new_MSingleCumulative(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mcp.delete_MSingleCumulative
    __del__ = lambda self: None

    def Price(self, *args):
        return _mcp.MSingleCumulative_Price(self, *args)

    def MarketValue(self, isAmount=True):
        return _mcp.MSingleCumulative_MarketValue(self, isAmount)

    def DiscMarketValue(self, isAmount=True):
        return _mcp.MSingleCumulative_DiscMarketValue(self, isAmount)

    def PnL(self, isAmount=True, tradePrice=0.0):
        return _mcp.MSingleCumulative_PnL(self, isAmount, tradePrice)

    def DiscPnL(self, isAmount=True, tradePrice=0.0):
        return _mcp.MSingleCumulative_DiscPnL(self, isAmount, tradePrice)

    def Delta(self, isCCY2=False, isAmount=True, npricingMethod=1):
        return _mcp.MSingleCumulative_Delta(self, isCCY2, isAmount, npricingMethod)

    def Gamma(self, isCCY2=False, isAmount=True, npricingMethod=1):
        return _mcp.MSingleCumulative_Gamma(self, isCCY2, isAmount, npricingMethod)

    def Vega(self, isCCY2=False, isAmount=True, npricingMethod=1):
        return _mcp.MSingleCumulative_Vega(self, isCCY2, isAmount, npricingMethod)

    def Theta(self, isCCY2=False, isAmount=True, npricingMethod=1):
        return _mcp.MSingleCumulative_Theta(self, isCCY2, isAmount, npricingMethod)

    def Rho(self, isCCY2=False, isAmount=True, npricingMethod=1):
        return _mcp.MSingleCumulative_Rho(self, isCCY2, isAmount, npricingMethod)

    def Vanna(self, isCCY2=False, isAmount=True, npricingMethod=1):
        return _mcp.MSingleCumulative_Vanna(self, isCCY2, isAmount, npricingMethod)

    def Volga(self, isCCY2=False, isAmount=True, npricingMethod=1):
        return _mcp.MSingleCumulative_Volga(self, isCCY2, isAmount, npricingMethod)

    def ForwardDelta(self, isCCY2=False, isAmount=True, npricingMethod=1):
        return _mcp.MSingleCumulative_ForwardDelta(self, isCCY2, isAmount, npricingMethod)

    def Dispose(self):
        return _mcp.MSingleCumulative_Dispose(self)
MSingleCumulative_swigregister = _mcp.MSingleCumulative_swigregister
MSingleCumulative_swigregister(MSingleCumulative)

class MDoubleCumulative(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDoubleCumulative, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDoubleCumulative, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _mcp.new_MDoubleCumulative(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mcp.delete_MDoubleCumulative
    __del__ = lambda self: None

    def Dispose(self):
        return _mcp.MDoubleCumulative_Dispose(self)

    def Clone(self, newStartDate, newEndDate):
        return _mcp.MDoubleCumulative_Clone(self, newStartDate, newEndDate)

    def Price(self, *args):
        return _mcp.MDoubleCumulative_Price(self, *args)

    def MarketValue(self, isAmount=True):
        return _mcp.MDoubleCumulative_MarketValue(self, isAmount)

    def DiscMarketValue(self, isAmount=True):
        return _mcp.MDoubleCumulative_DiscMarketValue(self, isAmount)

    def PnL(self, isAmount=True, tradePrice=0.0):
        return _mcp.MDoubleCumulative_PnL(self, isAmount, tradePrice)

    def DiscPnL(self, isAmount=True, tradePrice=0.0):
        return _mcp.MDoubleCumulative_DiscPnL(self, isAmount, tradePrice)

    def Delta(self, isCCY2=False, isAmount=True, npricingMethod=1):
        return _mcp.MDoubleCumulative_Delta(self, isCCY2, isAmount, npricingMethod)

    def Gamma(self, isCCY2=False, isAmount=True, npricingMethod=1):
        return _mcp.MDoubleCumulative_Gamma(self, isCCY2, isAmount, npricingMethod)

    def Vega(self, isCCY2=False, isAmount=True, npricingMethod=1):
        return _mcp.MDoubleCumulative_Vega(self, isCCY2, isAmount, npricingMethod)

    def Theta(self, isCCY2=False, isAmount=True, npricingMethod=1):
        return _mcp.MDoubleCumulative_Theta(self, isCCY2, isAmount, npricingMethod)

    def Rho(self, isCCY2=False, isAmount=True, npricingMethod=1):
        return _mcp.MDoubleCumulative_Rho(self, isCCY2, isAmount, npricingMethod)

    def Vanna(self, isCCY2=False, isAmount=True, npricingMethod=1):
        return _mcp.MDoubleCumulative_Vanna(self, isCCY2, isAmount, npricingMethod)

    def Volga(self, isCCY2=False, isAmount=True, npricingMethod=1):
        return _mcp.MDoubleCumulative_Volga(self, isCCY2, isAmount, npricingMethod)

    def ForwardDelta(self, isCCY2=False, isAmount=True, npricingMethod=1):
        return _mcp.MDoubleCumulative_ForwardDelta(self, isCCY2, isAmount, npricingMethod)
MDoubleCumulative_swigregister = _mcp.MDoubleCumulative_swigregister
MDoubleCumulative_swigregister(MDoubleCumulative)

class EMFXForward(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EMFXForward, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EMFXForward, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _mcp.new_EMFXForward(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mcp.delete_EMFXForward
    __del__ = lambda self: None

    def GetReferenceDate(self):
        return _mcp.EMFXForward_GetReferenceDate(self)

    def GetDeliveryDate(self):
        return _mcp.EMFXForward_GetDeliveryDate(self)

    def GetCalendar(self):
        return _mcp.EMFXForward_GetCalendar(self)

    def GetBuySell(self):
        return _mcp.EMFXForward_GetBuySell(self)

    def GetFaceValue(self):
        return _mcp.EMFXForward_GetFaceValue(self)

    def GetStrike(self):
        return _mcp.EMFXForward_GetStrike(self)

    def GetTimeToDelivery(self):
        return _mcp.EMFXForward_GetTimeToDelivery(self)

    def GetSpot(self):
        return _mcp.EMFXForward_GetSpot(self)

    def GetDomesticRate(self):
        return _mcp.EMFXForward_GetDomesticRate(self)

    def GetForeignRate(self):
        return _mcp.EMFXForward_GetForeignRate(self)

    def GetForward(self):
        return _mcp.EMFXForward_GetForward(self)

    def MarketValue(self, isAmount=True):
        return _mcp.EMFXForward_MarketValue(self, isAmount)

    def DiscMarketValue(self, isAmount=True):
        return _mcp.EMFXForward_DiscMarketValue(self, isAmount)

    def PnL(self, isAmount=True, tradePrice=0.0):
        return _mcp.EMFXForward_PnL(self, isAmount, tradePrice)

    def DiscPnL(self, isAmount=True, tradePrice=0.0):
        return _mcp.EMFXForward_DiscPnL(self, isAmount, tradePrice)

    def Price(self, isAmount=True):
        return _mcp.EMFXForward_Price(self, isAmount)

    def Delta(self, isCCY2=False, isAmount=True):
        return _mcp.EMFXForward_Delta(self, isCCY2, isAmount)

    def Gamma(self, isCCY2=False, isAmount=True):
        return _mcp.EMFXForward_Gamma(self, isCCY2, isAmount)

    def Vega(self, isCCY2=False, isAmount=True):
        return _mcp.EMFXForward_Vega(self, isCCY2, isAmount)

    def Theta(self, isCCY2=False, isAmount=True):
        return _mcp.EMFXForward_Theta(self, isCCY2, isAmount)

    def Rho(self, isCCY2=False, isAmount=True):
        return _mcp.EMFXForward_Rho(self, isCCY2, isAmount)

    def ForwardDelta(self, isCCY2=False, isAmount=True):
        return _mcp.EMFXForward_ForwardDelta(self, isCCY2, isAmount)

    def Vanna(self, isCCY2=False, isAmount=True):
        return _mcp.EMFXForward_Vanna(self, isCCY2, isAmount)

    def Volga(self, isCCY2=False, isAmount=True):
        return _mcp.EMFXForward_Volga(self, isCCY2, isAmount)

    def ScaleFactor(self):
        return _mcp.EMFXForward_ScaleFactor(self)

    def Dispose(self):
        return _mcp.EMFXForward_Dispose(self)
EMFXForward_swigregister = _mcp.EMFXForward_swigregister
EMFXForward_swigregister(EMFXForward)

class MFXSwap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MFXSwap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MFXSwap, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _mcp.new_MFXSwap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mcp.delete_MFXSwap
    __del__ = lambda self: None

    def GetReferenceDate(self):
        return _mcp.MFXSwap_GetReferenceDate(self)

    def GetNearDate(self):
        return _mcp.MFXSwap_GetNearDate(self)

    def GetFarDate(self):
        return _mcp.MFXSwap_GetFarDate(self)

    def GetCalendar(self):
        return _mcp.MFXSwap_GetCalendar(self)

    def GetBuySell(self):
        return _mcp.MFXSwap_GetBuySell(self)

    def GetFaceValue(self):
        return _mcp.MFXSwap_GetFaceValue(self)

    def GetTradeSpot(self):
        return _mcp.MFXSwap_GetTradeSpot(self)

    def GetTradeFwdPoints(self):
        return _mcp.MFXSwap_GetTradeFwdPoints(self)

    def GetTimeToNear(self):
        return _mcp.MFXSwap_GetTimeToNear(self)

    def GetTimeToFar(self):
        return _mcp.MFXSwap_GetTimeToFar(self)

    def GetSpot(self):
        return _mcp.MFXSwap_GetSpot(self)

    def GetDomesticRate(self):
        return _mcp.MFXSwap_GetDomesticRate(self)

    def GetForeignRate(self):
        return _mcp.MFXSwap_GetForeignRate(self)

    def GetForward(self):
        return _mcp.MFXSwap_GetForward(self)

    def MarketValue(self, isAmount=True):
        return _mcp.MFXSwap_MarketValue(self, isAmount)

    def DiscMarketValue(self, isAmount=True):
        return _mcp.MFXSwap_DiscMarketValue(self, isAmount)

    def PnL(self, isAmount=True, tradePrice=0.0):
        return _mcp.MFXSwap_PnL(self, isAmount, tradePrice)

    def DiscPnL(self, isAmount=True, tradePrice=0.0):
        return _mcp.MFXSwap_DiscPnL(self, isAmount, tradePrice)

    def Price(self, isAmount=True):
        return _mcp.MFXSwap_Price(self, isAmount)

    def Delta(self, isCCY2=False, isAmount=True):
        return _mcp.MFXSwap_Delta(self, isCCY2, isAmount)

    def Gamma(self, isCCY2=False, isAmount=True):
        return _mcp.MFXSwap_Gamma(self, isCCY2, isAmount)

    def Vega(self, isCCY2=False, isAmount=True):
        return _mcp.MFXSwap_Vega(self, isCCY2, isAmount)

    def Theta(self, isCCY2=False, isAmount=True):
        return _mcp.MFXSwap_Theta(self, isCCY2, isAmount)

    def Rho(self, isCCY2=False, isAmount=True):
        return _mcp.MFXSwap_Rho(self, isCCY2, isAmount)

    def ForwardDelta(self, isCCY2=False, isAmount=True):
        return _mcp.MFXSwap_ForwardDelta(self, isCCY2, isAmount)

    def Vanna(self, isCCY2=False, isAmount=True):
        return _mcp.MFXSwap_Vanna(self, isCCY2, isAmount)

    def Volga(self, isCCY2=False, isAmount=True):
        return _mcp.MFXSwap_Volga(self, isCCY2, isAmount)

    def ScaleFactor(self):
        return _mcp.MFXSwap_ScaleFactor(self)

    def Dispose(self):
        return _mcp.MFXSwap_Dispose(self)
MFXSwap_swigregister = _mcp.MFXSwap_swigregister
MFXSwap_swigregister(MFXSwap)

# This file is compatible with both classic and new-style classes.


